{
  "processes": [
	  {
	  "id": "add_dimension",
	  "summary": "Add a new dimension",
	  "description": "Adds a new named dimension to the data cube.\n\nAfterwards, the dimension can be referred to with the specified `name`. If a dimension with the specified name exists, the process fails with a `DimensionExists` exception. The dimension label of the dimension is set to the specified `label`.",
	  "categories": [
		"cubes"
	  ],
	  "parameters": [
		{
		  "name": "data",
		  "description": "A data cube to add the dimension to.",
		  "schema": {
			"type": "object",
			"subtype": "raster-cube"
		  }
		},
		{
		  "name": "name",
		  "description": "Name for the dimension.",
		  "schema": {
			"type": "string"
		  }
		},
		{
		  "name": "label",
		  "description": "A dimension label.",
		  "schema": [
			{
			  "type": "number"
			},
			{
			  "type": "string"
			}
		  ]
		},
		{
		  "name": "type",
		  "description": "The type of dimension, defaults to `other`.",
		  "schema": {
			"type": "string",
			"enum": [
			  "spatial",
			  "temporal",
			  "bands",
			  "other"
			]
		  },
		  "default": "other",
		  "optional": true
		}
	  ],
	  "returns": {
		"description": "The data cube with a newly added dimension. The new dimension has exactly one dimension label. All other dimensions remain unchanged.",
		"schema": {
		  "type": "object",
		  "subtype": "raster-cube"
		}
	  },
	  "exceptions": {
		"DimensionExists": {
		  "message": "A dimension with the specified name already exists."
		}
	  }
	},
      {
      "id": "filter_bbox",
      "summary": "Spatial filter using a bounding box",
      "description": "Limits the data cube to the specified bounding box.\n\nThe filter retains a pixel in the data cube if the point at the pixel center intersects with the bounding box (as defined in the Simple Features standard by the OGC).",
      "categories": [
        "cubes",
        "filter"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "extent",
          "description": "A bounding box, which may include a vertical axis (see `base` and `height`).",
          "schema": {
            "type": "object",
            "subtype": "bounding-box",
            "required": [
              "west",
              "south",
              "east",
              "north"
            ],
            "properties": {
              "west": {
                "description": "West (lower left corner, coordinate axis 1).",
                "type": "number"
              },
              "south": {
                "description": "South (lower left corner, coordinate axis 2).",
                "type": "number"
              },
              "east": {
                "description": "East (upper right corner, coordinate axis 1).",
                "type": "number"
              },
              "north": {
                "description": "North (upper right corner, coordinate axis 2).",
                "type": "number"
              },
              "base": {
                "description": "Base (optional, lower left corner, coordinate axis 3).",
                "type": [
                  "number",
                  "null"
                ],
                "default": null
              },
              "height": {
                "description": "Height (optional, upper right corner, coordinate axis 3).",
                "type": [
                  "number",
                  "null"
                ],
                "default": null
              },
              "crs": {
                "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
                "anyOf": [
                  {
                    "title": "EPSG Code",
                    "type": "integer",
                    "subtype": "epsg-code",
                    "minimum": 1000,
                    "examples": [
                      3857
                    ]
                  },
                  {
                    "title": "WKT2",
                    "type": "string",
                    "subtype": "wkt2-definition"
                  },
                  {
                    "title": "PROJ definition",
                    "type": "string",
                    "subtype": "proj-definition",
                    "deprecated": true
                  }
                ],
                "default": 4326
              }
            }
          }
        }
      ],
      "returns": {
        "description": "A data cube restricted to the bounding box. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the spatial dimensions have less (or the same) dimension labels.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "links": [
        {
          "href": "https://openeo.org/documentation/1.0/datacubes.html#filter",
          "rel": "about",
          "title": "Filters explained in the openEO documentation"
        },
        {
          "rel": "about",
          "href": "https://proj.org/usage/projections.html",
          "title": "PROJ parameters for cartographic projections"
        },
        {
          "rel": "about",
          "href": "http://www.epsg-registry.org",
          "title": "Official EPSG code registry"
        },
        {
          "rel": "about",
          "href": "http://www.epsg.io",
          "title": "Unofficial EPSG code database"
        },
        {
          "href": "http://www.opengeospatial.org/standards/sfa",
          "rel": "about",
          "title": "Simple Features standard by the OGC"
        }
      ]
    },
      {
      "id": "sum",
      "summary": "Compute the sum by adding up numbers",
      "description": "Sums up all elements in a sequential array of numbers and returns the computed sum.\n\nBy default no-data values are ignored. Setting `ignore_nodata` to `false` considers no-data values so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
      "categories": [
        "math",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "An array of numbers.",
          "schema": {
            "type": "array",
            "items": {
              "type": [
                "number",
                "null"
              ]
            }
          }
        },
        {
          "name": "ignore_nodata",
          "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "The computed sum of the sequence of numbers.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              5,
              1
            ]
          },
          "returns": 6
        },
        {
          "arguments": {
            "data": [
              -2,
              4,
              2.5
            ]
          },
          "returns": 4.5
        },
        {
          "arguments": {
            "data": [
              1,
              null
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "arguments": {
            "data": [
              100
            ]
          },
          "returns": 100
        },
        {
          "arguments": {
            "data": [
              null
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "arguments": {
            "data": []
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Sum.html",
          "title": "Sum explained by Wolfram MathWorld"
        },
        {
          "rel": "about",
          "href": "https://ieeexplore.ieee.org/document/8766229",
          "title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
        }
      ]
    },
      {
      "id": "product",
      "summary": "Compute the product by multiplying numbers",
      "description": "Multiplies all elements in a sequential array of numbers and returns the computed product.\n\nBy default no-data values are ignored. Setting `ignore_nodata` to `false` considers no-data values so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
      "categories": [
        "math",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "An array of numbers.",
          "schema": {
            "type": "array",
            "items": {
              "type": [
                "number",
                "null"
              ]
            }
          }
        },
        {
          "name": "ignore_nodata",
          "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "The computed product of the sequence of numbers.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              5,
              0
            ]
          },
          "returns": 0
        },
        {
          "arguments": {
            "data": [
              -2,
              4,
              2.5
            ]
          },
          "returns": -20
        },
        {
          "arguments": {
            "data": [
              1,
              null
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "arguments": {
            "data": [
              -1
            ]
          },
          "returns": -1
        },
        {
          "arguments": {
            "data": [
              null
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "arguments": {
            "data": []
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Product.html",
          "title": "Product explained by Wolfram MathWorld"
        },
        {
          "rel": "about",
          "href": "https://ieeexplore.ieee.org/document/8766229",
          "title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
        }
      ]
    },
      {
      "id": "array_interpolate_linear",
      "summary": "One-dimensional linear interpolation for arrays",
      "description": "Performs a linear interpolation for each of the no-data values (`null`) in the array given, except for leading and trailing no-data values.\n\nThe linear interpolants are defined by the array indices or labels (x) and the values in the array (y).",
      "categories": [
        "arrays",
        "math",
        "math > interpolation"
      ],
      "experimental": true,
      "parameters": [
        {
          "name": "data",
          "description": "An array of numbers and no-data values.\n\nIf the given array is a labeled array, the labels must have a natural/inherent label order and the process expects the labels to be sorted accordingly. This is the default behavior in openEO for spatial and temporal dimensions.",
          "schema": {
            "type": "array",
            "items": {
              "type": [
                "number",
                "null"
              ]
            }
          }
        }
      ],
      "returns": {
        "description": "An array with no-data values being replaced with interpolated values. If not at least 2 numerical values are available in the array, the array stays the same.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              null,
              1,
              null,
              6,
              null,
              -8
            ]
          },
          "returns": [
            null,
            1,
            3.5,
            6,
            -1,
            -8
          ]
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "https://en.wikipedia.org/wiki/Linear_interpolation",
          "title": "Linear interpolation explained by Wikipedia"
        }
      ]
    },
      {
      "id": "apply_dimension",
      "summary": "Apply a process to pixels along a dimension",
      "description": "Applies a process to all pixel values along a dimension of a raster data cube. For example, if the temporal dimension is specified the process will work on a time series of pixel values.\n\nThe process ``reduce_dimension()`` also applies a process to pixel values along a dimension, but drops the dimension afterwards. The process ``apply()`` applies a process to each pixel value in the data cube.\n\nThe target dimension is the source dimension if not specified otherwise in the `target_dimension` parameter. The pixel values in the target dimension get replaced by the computed pixel values. The name, type and reference system are preserved.\n\nThe dimension labels are preserved when the target dimension is the source dimension and the number of pixel values in the source dimension is equal to the number of values computed by the process. Otherwise, the dimension labels will be incrementing integers starting from zero, which can be changed using ``rename_labels()`` afterwards. The number of labels will equal to the number of values computed by the process.",
      "categories": [
        "cubes"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "process",
          "description": "Process to be applied on all pixel values. The specified process needs to accept an array and must return an array with at least one element. A process may consist of multiple sub-processes.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "data",
                "description": "A labeled array with elements of any type.",
                "schema": {
                  "type": "array",
                  "subtype": "labeled-array",
                  "items": {
                    "description": "Any data type."
                  }
                }
              },
              {
                "name": "context",
                "description": "Additional data passed by the user.",
                "schema": {
                  "description": "Any data type."
                },
                "optional": true,
                "default": null
              }
            ],
            "returns": {
              "description": "The value to be set in the new data cube.",
              "schema": {
                "type": "array",
                "items": {
                  "description": "Any data type."
                }
              }
            }
          }
        },
        {
          "name": "dimension",
          "description": "The name of the source dimension to apply the process on. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "target_dimension",
          "description": "The name of the target dimension or `null` (the default) to use the source dimension specified in the parameter `dimension`.\n\nBy specifying a target dimension, the source dimension is removed. The target dimension with the specified name and the type `other` (see ``add_dimension()``) is created, if it doesn't exist yet.",
          "schema": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": null,
          "optional": true
        },
        {
          "name": "context",
          "description": "Additional data to be passed to the process.",
          "schema": {
            "description": "Any data type."
          },
          "optional": true,
          "default": null
        }
      ],
      "returns": {
        "description": "A data cube with the newly computed values.\n\nAll dimensions stay the same, except for the dimensions specified in corresponding parameters. There are three cases how the dimensions can change:\n\n1. The source dimension is the target dimension:\n   - The (number of) dimensions remain unchanged as the source dimension is the target dimension.\n   - The source dimension properties name and type remain unchanged.\n   - The dimension labels, the reference system and the resolution are preserved only if the number of pixel values in the source dimension is equal to the number of values computed by the process. Otherwise, all other dimension properties change as defined in the list below.\n2. The source dimension is not the target dimension and the latter exists:\n   - The number of dimensions decreases by one as the source dimension is dropped.\n   - The target dimension properties name and type remain unchanged. All other dimension properties change as defined in the list below.\n3. The source dimension is not the target dimension and the latter does not exist:\n   - The number of dimensions remain unchanged, but the source dimension is replaced with the target dimension.\n   - The target dimension has the specified name and the type other. All other dimension properties are set as defined in the list below.\n\nUnless otherwise stated above, for the given (target) dimension the following applies:\n\n- the number of dimension labels is equal to the number of values computed by the process,\n- the dimension labels are incrementing integers starting from zero,\n- the resolution changes, and\n- the reference system is undefined.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "DimensionNotAvailable": {
          "message": "A dimension with the specified name does not exist."
        }
      },
      "links": [
        {
          "href": "https://openeo.org/documentation/1.0/datacubes.html#apply",
          "rel": "about",
          "title": "Apply explained in the openEO documentation"
        }
      ]
    },
      {
      "id": "aggregate_temporal_period",
      "summary": "Temporal aggregations based on calendar hierarchies",
      "description": "Computes a temporal aggregation based on calendar hierarchies such as years, months or seasons. For other calendar hierarchies ``aggregate_temporal()`` can be used.\n\nFor each interval, all data along the dimension will be passed through the reducer.\n\nIf the dimension is not set or is set to `null`, the data cube is expected to only have one temporal dimension.",
      "categories": [
        "aggregate & resample",
        "climatology",
        "cubes"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "period",
          "description": "The time intervals to aggregate. The following pre-defined values are available:\n\n* `hour`: Hour of the day\n* `day`: Day of the year\n* `week`: Week of the year\n* `dekad`: Ten day periods, counted per year with three periods per month (day 1 - 10, 11 - 20 and 21 - end of month). The third dekad of the month can range from 8 to 11 days. For example, the fourth dekad is Feb, 1 - Feb, 10 each year.\n* `month`: Month of the year\n* `season`: Three month periods of the calendar seasons (December - February, March - May, June - August, September - November).\n* `tropical-season`: Six month periods of the tropical seasons (November - April, May - October).\n* `year`: Proleptic years\n* `decade`: Ten year periods ([0-to-9 decade](https://en.wikipedia.org/wiki/Decade#0-to-9_decade)), from a year ending in a 0 to the next year ending in a 9.\n* `decade-ad`: Ten year periods ([1-to-0 decade](https://en.wikipedia.org/wiki/Decade#1-to-0_decade)) better aligned with the anno Domini (AD) calendar era, from a year ending in a 1 to the next year ending in a 0.",
          "schema": {
            "type": "string",
            "enum": [
              "hour",
              "day",
              "week",
              "dekad",
              "month",
              "season",
              "tropical-season",
              "year",
              "decade",
              "decade-ad"
            ]
          }
        },
        {
          "name": "reducer",
          "description": "A reducer to be applied for the values contained in each period. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes. Periods may not contain any values, which for most reducers leads to no-data (`null`) values by default.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "data",
                "description": "A labeled array with elements of any type. If there's no data for the period, the array is empty.",
                "schema": {
                  "type": "array",
                  "subtype": "labeled-array",
                  "items": {
                    "description": "Any data type."
                  }
                }
              },
              {
                "name": "context",
                "description": "Additional data passed by the user.",
                "schema": {
                  "description": "Any data type."
                },
                "optional": true,
                "default": null
              }
            ],
            "returns": {
              "description": "The value to be set in the new data cube.",
              "schema": {
                "description": "Any data type."
              }
            }
          }
        },
        {
          "name": "dimension",
          "description": "The name of the temporal dimension for aggregation. All data along the dimension is passed through the specified reducer. If the dimension is not set or set to `null`, the data cube is expected to only have one temporal dimension. Fails with a `TooManyDimensions` exception if it has more dimensions. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
          "schema": {
            "type": [
              "string",
              "null"
            ]
          },
          "optional": true,
          "default": null
        },
        {
          "name": "context",
          "description": "Additional data to be passed to the reducer.",
          "schema": {
            "description": "Any data type."
          },
          "optional": true,
          "default": null
        }
      ],
      "returns": {
        "description": "A new data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except for the resolution and dimension labels of the given temporal dimension. The specified temporal dimension has the following dimension labels (`YYYY` = four-digit year, `MM` = two-digit month, `DD` two-digit day of month):\n\n* `hour`: `YYYY-MM-DD-00` - `YYYY-MM-DD-23`\n* `day`: `YYYY-001` - `YYYY-365`\n* `week`: `YYYY-01` - `YYYY-52`\n* `dekad`: `YYYY-00` - `YYYY-36`\n* `month`: `YYYY-01` - `YYYY-12`\n* `season`: `YYYY-djf` (December - February), `YYYY-mam` (March - May), `YYYY-jja` (June - August), `YYYY-son` (September - November).\n* `tropical-season`: `YYYY-ndjfma` (November - April), `YYYY-mjjaso` (May - October).\n* `year`: `YYYY`\n* `decade`: `YYY0`\n* `decade-ad`: `YYY1`",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "TooManyDimensions": {
          "message": "The data cube contains multiple temporal dimensions. The parameter `dimension` must be specified."
        },
        "DimensionNotAvailable": {
          "message": "A dimension with the specified name does not exist."
        },
        "DistinctDimensionLabelsRequired": {
          "message": "The dimension labels have duplicate values. Distinct labels must be specified."
        }
      },
      "links": [
        {
          "href": "https://openeo.org/documentation/1.0/datacubes.html#aggregate",
          "rel": "about",
          "title": "Aggregation explained in the openEO documentation"
        }
      ]
    },
    {
      "id": "sd",
      "summary": "Standard deviation",
      "description": "Computes the sample standard deviation, which quantifies the amount of variation of an array of numbers. It is defined to be the square root of the corresponding variance (see ``variance()``).\n\nA low standard deviation indicates that the values tend to be close to the expected value, while a high standard deviation indicates that the values are spread out over a wider range.\n\nAn array without non-`null` elements resolves always with `null`.",
      "categories": [
        "math",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "An array of numbers.",
          "schema": {
            "type": "array",
            "items": {
              "type": [
                "number",
                "null"
              ]
            }
          }
        },
        {
          "name": "ignore_nodata",
          "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "The computed sample standard deviation.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              -1,
              1,
              3,
              null
            ]
          },
          "returns": 2
        },
        {
          "arguments": {
            "data": [
              -1,
              1,
              3,
              null
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "description": "The input array is empty: return `null`.",
          "arguments": {
            "data": []
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/StandardDeviation.html",
          "title": "Standard deviation explained by Wolfram MathWorld"
        }
      ],
      "process_graph": {
        "variance": {
          "process_id": "variance",
          "arguments": {
            "data": {
              "from_parameter": "data"
            },
            "ignore_nodata": {
              "from_parameter": "ignore_nodata"
            }
          }
        },
        "power": {
          "process_id": "power",
          "arguments": {
            "base": {
              "from_node": "variance"
            },
            "p": 0.5
          },
          "result": true
        }
      }
    },
    {
      "id": "load_result",
      "summary": "Load batch job results",
      "description": "Loads batch job results by job id from the server-side user workspace. The job must have been stored by the authenticated user on the back-end currently connected to.",
      "categories": [
        "cubes",
        "import"
      ],
      "experimental": true,
      "parameters": [
        {
          "name": "id",
          "description": "The id of a batch job with results.",
          "schema": {
            "type": "string",
            "subtype": "job-id",
            "pattern": "^[\\w\\-\\.~]+$"
          }
        }
      ],
      "returns": {
        "description": "A data cube for further processing.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      }
    },
    {
      "id": "clip",
      "summary": "Clip a value between a minimum and a maximum",
      "description": "Clips a number between specified minimum and maximum values. A value larger than the maximum value is set to the maximum value, a value lower than the minimum value is set to the minimum value.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
      "categories": [
        "math"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "A number.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        {
          "name": "min",
          "description": "Minimum value. If the value is lower than this value, the process will return the value of this parameter.",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "max",
          "description": "Maximum value. If the value is greater than this value, the process will return the value of this parameter.",
          "schema": {
            "type": "number"
          }
        }
      ],
      "returns": {
        "description": "The value clipped to the specified range.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": -5,
            "min": -1,
            "max": 1
          },
          "returns": -1
        },
        {
          "arguments": {
            "x": 10.001,
            "min": 1,
            "max": 10
          },
          "returns": 10
        },
        {
          "arguments": {
            "x": 0.000001,
            "min": 0,
            "max": 0.02
          },
          "returns": 0.000001
        },
        {
          "arguments": {
            "x": null,
            "min": 0,
            "max": 1
          },
          "returns": null
        }
      ],
      "process_graph": {
        "min": {
          "process_id": "min",
          "arguments": {
            "data": [
              {
                "from_parameter": "max"
              },
              {
                "from_parameter": "x"
              }
            ]
          }
        },
        "max": {
          "process_id": "max",
          "arguments": {
            "data": [
              {
                "from_parameter": "min"
              },
              {
                "from_node": "min"
              }
            ]
          },
          "result": true
        }
      }
    },
    {
      "id": "fit_curve",
      "summary": "Curve fitting",
      "description": "Use non-linear least squares to fit a model function `y = f(x, parameters)` to data.\n\nThe process throws an `InvalidValues` exception if invalid values are encountered. Invalid values are finite numbers (see also ``is_valid()``).",
      "categories": [
        "cubes",
        "math"
      ],
      "experimental": true,
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "parameters",
          "description": "Defined the number of parameters for the model function and provides an initial guess for them. At least one parameter is required.",
          "schema": [
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "number"
              }
            },
            {
              "title": "Data Cube with optimal values from a previous result of this process.",
              "type": "object",
              "subtype": "raster-cube"
            }
          ]
        },
        {
          "name": "function",
          "description": "The model function. It must take the parameters to fit as array through the first argument and the independent variable `x` as the second argument.\n\nIt is recommended to store the model function as a user-defined process on the back-end to be able to re-use the model function with the computed optimal values for the parameters afterwards.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "x",
                "description": "The value for the independent variable `x`.",
                "schema": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "parameters",
                "description": "The parameters for the model function, contains at least one parameter.",
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "number"
                  }
                }
              }
            ],
            "returns": {
              "description": "The computed value `y` value for the given independent variable `x` and the parameters.",
              "schema": {
                "type": "number"
              }
            }
          }
        },
        {
          "name": "dimension",
          "description": "The name of the dimension for curve fitting. Must be a dimension with labels that have a order (i.e. numerical labels or a temporal dimension). Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "returns": {
        "description": "A data cube with the optimal values for the parameters.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "InvalidValues": {
          "message": "At least one of the values is not a finite number."
        },
        "DimensionNotAvailable": {
          "message": "A dimension with the specified name does not exist."
        }
      }
    },
    {
      "id": "predict_curve",
      "summary": "Predict values",
      "description": "Predict values using a model function and pre-computed parameters.",
      "categories": [
        "cubes",
        "math"
      ],
      "experimental": true,
      "parameters": [
        {
          "name": "data",
          "description": "A data cube to predict values for.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "parameters",
          "description": "A data cube with optimal values from a result of e.g. ``fit_curve()``.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "function",
          "description": "The model function. It must take the parameters to fit as array through the first argument and the independent variable `x` as the second argument.\n\nIt is recommended to store the model function as a user-defined process on the back-end.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "x",
                "description": "The value for the independent variable `x`.",
                "schema": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "parameters",
                "description": "The parameters for the model function, contains at least one parameter.",
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "number"
                  }
                }
              }
            ],
            "returns": {
              "description": "The computed value `y` value for the given independent variable `x` and the parameters.",
              "schema": {
                "type": "number"
              }
            }
          }
        },
        {
          "name": "dimension",
          "description": "The name of the dimension for predictions. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "labels",
          "description": "The labels to predict values for. If no labels are given, predicts values only for no-data (`null`) values in the data cube.",
          "optional": true,
          "default": null,
          "schema": [
            {
              "type": "null"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string",
                    "format": "date",
                    "subtype": "date"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "subtype": "date-time"
                  }
                ]
              }
            }
          ]
        }
      ],
      "returns": {
        "description": "A data cube with the predicted values.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "DimensionNotAvailable": {
          "message": "A dimension with the specified name does not exist."
        }
      }
    },
    {
      "id": "dimension_labels",
      "summary": "Get the dimension labels",
      "description": "Returns all labels for a dimension in the data cube. The labels have the same order as in the data cube.",
      "categories": [
        "cubes"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "The data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "dimension",
          "description": "The name of the dimension to get the labels for.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "returns": {
        "description": "The labels as array.",
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      }
    },
    {
      "id": "pi",
      "summary": "Pi (??)",
      "description": "The real number Pi (??) is a mathematical constant that is the ratio of the circumference of a circle to its diameter. The numerical value is approximately *3.14159*.",
      "categories": [
        "math > constants",
        "math > trigonometric"
      ],
      "parameters": [],
      "returns": {
        "description": "The numerical value of Pi.",
        "schema": {
          "type": "number"
        }
      },
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Pi.html",
          "title": "Mathematical constant Pi explained by Wolfram MathWorld"
        }
      ]
    },
    {
      "id": "rename_labels",
      "summary": "Rename dimension labels",
      "description": "Renames the labels of the specified dimension in the data cube from `source` to `target`.\n\nIf the array for the source labels is empty (the default), the dimension labels are expected to be enumerated with zero-based numbering (0,1,2,3,...) so that the dimension labels directly map to the indices of the array specified for the parameter `target`. If the dimension labels are not enumerated and the `target` parameter is not specified, a `LabelsNotEnumerated` is thrown. The number of source and target labels must be equal, otherwise the error `LabelMismatch` is thrown.\n\nThis process doesn't change the order of the labels and their corresponding data.",
      "categories": [
        "cubes"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "The data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "dimension",
          "description": "The name of the dimension to rename the labels for.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "target",
          "description": "The new names for the labels. The dimension labels in the data cube are expected to be enumerated, if the parameter `target` is not specified. If a target dimension label already exists in the data cube, a `LabelExists` error is thrown.",
          "schema": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        },
        {
          "name": "source",
          "description": "The names of the labels as they are currently in the data cube. The array defines an unsorted and potentially incomplete list of labels that should be renamed to the names available in the corresponding array elements in the parameter `target`. If one of the source dimension labels doesn't exist, a `LabelNotAvailable` error is thrown. By default, the array is empty so that the dimension labels in the data cube are expected to be enumerated.",
          "schema": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "default": [],
          "optional": true
        }
      ],
      "returns": {
        "description": "The data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that for the given dimension the labels change. The old labels can not be referred to any longer. The number of labels remains the same.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "LabelsNotEnumerated": {
          "message": "The dimension labels are not enumerated."
        },
        "LabelMismatch": {
          "message": "The number of labels in the parameters `source` and `target` don't match."
        },
        "LabelNotAvailable": {
          "message": "A label with the specified name does not exist."
        },
        "LabelExists": {
          "message": "A label with the specified name exists."
        }
      },
      "examples": [
        {
          "title": "Rename named labels",
          "description": "Renaming the bands from `B1` to `red`, from `B2` to `green` and from `B3` to `blue`.",
          "arguments": {
            "data": {
              "from_parameter": "data"
            },
            "dimension": "bands",
            "source": [
              "B1",
              "B2",
              "B3"
            ],
            "target": [
              "red",
              "green",
              "blue"
            ]
          }
        }
      ],
      "links": [
        {
          "rel": "example",
          "type": "application/json",
          "href": "https://processes.openeo.org/1.0.0/examples/rename-enumerated-labels.json",
          "title": "Rename enumerated labels"
        }
      ]
    },
    {
      "id": "aggregate_spatial_window",
      "summary": "Zonal statistics for rectangular windows",
      "description": "Aggregates statistics over the horizontal spatial dimensions (axes `x` and `y`) of the data cube.\n\nThe pixel grid for the axes `x` and `y` is divided into non-overlapping windows with the size specified in the parameter `size`. If the number of values for the axes `x` and `y` is not a multiple of the corresponding window size, the behaviour specified in the parameters `boundary` and `align` is applied.\nFor each of these windows, the reducer process computes the result.",
      "categories": [
        "cubes",
        "aggregate & resample"
      ],
      "experimental": true,
      "parameters": [
        {
          "name": "data",
          "description": "A raster data cube with exactly two horizontal spatial dimensions and an arbitrary number of additional dimensions. The process is applied to all additional dimensions individually.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "reducer",
          "description": "A reducer to be applied on the list of values, which contain all pixels covered by the window. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "data",
                "description": "An array with elements of any type.",
                "schema": {
                  "type": "array",
                  "items": {
                    "description": "Any data type."
                  }
                }
              },
              {
                "name": "context",
                "description": "Additional data passed by the user.",
                "schema": {
                  "description": "Any data type."
                },
                "optional": true,
                "default": null
              }
            ]
          }
        },
        {
          "name": "size",
          "description": "Window sizes in pixels along the horizontal spatial dimensions.\n\nThe first value corresponds to the `x` axis, the second values corresponds to the `y` axis.",
          "schema": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "integer",
              "minimum": 1
            }
          }
        },
        {
          "name": "boundary",
          "description": "Behaviour to apply if the number of values for the axes `x` and `y` is not a multiple of the corresponding value in the `size` parameter. Options are:\n\n- `pad` (default): pad the data cube with the no-data value `null` to fit the required window size.\n\n- `trim`: trim the data cube to fit the required window size.\n\nSet the parameter `align` to specifies to which corner the data is aligned to.",
          "schema": {
            "type": "string",
            "enum": [
              "pad",
              "trim"
            ]
          },
          "optional": true,
          "default": "pad"
        },
        {
          "name": "align",
          "description": "If the data requires padding or trimming (see parameter `boundary`), specifies to which corner of the spatial extent the data is aligned to. For example, if the data is aligned to the upper left, the process pads/trims at the lower-right.",
          "schema": {
            "type": "string",
            "enum": [
              "lower-left",
              "upper-left",
              "lower-right",
              "upper-right"
            ]
          },
          "default": "upper-left",
          "optional": true
        },
        {
          "name": "context",
          "description": "Additional data to be passed to the reducer.",
          "schema": {
            "description": "Any data type."
          },
          "optional": true,
          "default": null
        }
      ],
      "returns": {
        "description": "A data cube with the newly computed values and the same dimensions.\n\nThe resolution will change depending on the chosen values for the `size` and `boundary` parameter. It usually decreases for the dimensions which have the corresponding parameter `size` set to values greater than 1.\n\nThe dimension labels will be set to the coordinate at the center of the window. The other dimension properties (name, type and reference system) remain unchanged.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      }
    },
    {
      "id": "apply_kernel",
      "summary": "Apply a spatial convolution with a kernel",
      "description": "Applies a 2D convolution (i.e. a focal operation with a weighted kernel) on the horizontal spatial dimensions (axes `x` and `y`) of the data cube.\n\nEach value in the kernel is multiplied with the corresponding pixel value and all products are summed up afterwards. The sum is then multiplied with the factor.\n\nThe process can't handle non-numerical or infinite numerical values in the data cube. Boolean values are converted to integers (`false` = 0, `true` = 1), but all other non-numerical or infinite values are replaced with zeroes by default (see parameter `replace_invalid`).\n\nFor cases requiring more generic focal operations or non-numerical values, see ``apply_neighborhood()``.",
      "categories": [
        "cubes",
        "math > image filter"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "kernel",
          "description": "Kernel as a two-dimensional array of weights. The inner level of the nested array aligns with the `x` axis and the outer level aligns with the `y` axis. Each level of the kernel must have an uneven number of elements, otherwise the process throws a `KernelDimensionsUneven` error.",
          "schema": {
            "description": "A two-dimensional array of numbers.",
            "type": "array",
            "subtype": "kernel",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        {
          "name": "factor",
          "description": "A factor that is multiplied to each value after the kernel has been applied.\n\nThis is basically a shortcut for explicitly multiplying each value by a factor afterwards, which is often required for some kernel-based algorithms such as the Gaussian blur.",
          "schema": {
            "type": "number"
          },
          "default": 1,
          "optional": true
        },
        {
          "name": "border",
          "description": "Determines how the data is extended when the kernel overlaps with the borders. Defaults to fill the border with zeroes.\n\nThe following options are available:\n\n* *numeric value* - fill with a user-defined constant number `n`: `nnnnnn|abcdefgh|nnnnnn` (default, with `n` = 0)\n* `replicate` - repeat the value from the pixel at the border: `aaaaaa|abcdefgh|hhhhhh`\n* `reflect` - mirror/reflect from the border: `fedcba|abcdefgh|hgfedc`\n* `reflect_pixel` - mirror/reflect from the center of the pixel at the border: `gfedcb|abcdefgh|gfedcb`\n* `wrap` - repeat/wrap the image: `cdefgh|abcdefgh|abcdef`",
          "schema": [
            {
              "type": "string",
              "enum": [
                "replicate",
                "reflect",
                "reflect_pixel",
                "wrap"
              ]
            },
            {
              "type": "number"
            }
          ],
          "default": 0,
          "optional": true
        },
        {
          "name": "replace_invalid",
          "description": "This parameter specifies the value to replace non-numerical or infinite numerical values with. By default, those values are replaced with zeroes.",
          "schema": {
            "type": "number"
          },
          "default": 0,
          "optional": true
        }
      ],
      "returns": {
        "description": "A data cube with the newly computed values and the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "KernelDimensionsUneven": {
          "message": "Each dimension of the kernel must have an uneven number of elements."
        }
      },
      "links": [
        {
          "rel": "about",
          "href": "http://www.songho.ca/dsp/convolution/convolution.html",
          "title": "Convolutions explained"
        },
        {
          "rel": "about",
          "href": "http://www.songho.ca/dsp/convolution/convolution2d_example.html",
          "title": "Example of 2D Convolution"
        }
      ]
    },
    {
      "id": "coherence",
      "summary": "Compute the complex coherence with SAR data",
      "description": "Compute the complex coherence with SAR data, given the specified time delta.",
      "categories": [
        "cubes",
        "math"
      ],
      "experimental": true,
      "parameters": [
        {
          "name": "data",
          "description": "A raster data cube with exactly two horizontal spatial dimensions and an arbitrary number of additional dimensions. The process is applied to all additional dimensions individually.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "timedelta",
          "description": "Temporal delta between acquisitions on which we want to compute coherence.",
          "schema": {
            "type": "integer",
            "enum": [
              6,
              12,
              24,
              48
            ]
          },
          "default": "6 days",
          "optional": true
        }
      ],
      "returns": {
        "description": "A data cube with the projected values in the requested projection.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      }
    },
    {
      "id": "geocode",
      "summary": "Geocoding SAR data",
      "description": "Geocoding SAR data given the desired projection and resolution.",
      "categories": [
        "cubes",
        "aggregate & resample"
      ],
      "experimental": true,
      "parameters": [
        {
          "name": "data",
          "description": "A raster data cube with exactly two horizontal spatial dimensions and an arbitrary number of additional dimensions. The process is applied to all additional dimensions individually.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "crs",
          "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
          "anyOf": [
            {
              "title": "EPSG Code",
              "type": "integer",
              "subtype": "epsg-code",
              "minimum": 1000,
              "examples": [
                3857
              ]
            },
            {
              "title": "WKT2",
              "type": "string",
              "subtype": "wkt2-definition"
            },
            {
              "title": "PROJ definition",
              "type": "string",
              "subtype": "proj-definition",
              "deprecated": true
            }
          ],
          "default": 4326
        },
        {
          "name": "resolution",
          "description": "Desired reolution in meters.",
          "schema": {
            "type": "integer",
            "minItems": 1
          }
        }
      ],
      "returns": {
        "description": "A data cube with the projected values in the requested projection.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      }
    },
    {
      "id": "radar_mask",
      "summary": "Compute Radar Mask from DEM and LIA",
      "description": "Computes the Radar Mask taking into account Layover, Foreshortening and Shadow",
      "categories": [
        "cubes"
      ],
      "experimental": true,
      "parameters": [
        {
          "name": "data",
          "description": "A raster data cube with exactly two horizontal spatial dimensions and two bands called DEM and LIA, no other dimensions allowed (no temporal dimension)",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "threshold",
          "description": "The threshold to apply to the final mask, between 0 and 1.",
          "schema": {
            "type": "float",
            "minItems": 1
          },
          "default": 0.2
        },
        {
          "name": "orbit",
          "description": "The Sentinel-1 orbit direction.",
          "schema": [
            {
              "type": "string",
              "enum": [
                "ASC",
                "DSC"
              ]
            }
          ],
          "default": 0,
          "optional": false
        }
      ],
      "returns": {
        "description": "A boolean mask with zeros for the masked pixels and ones for the valid pixels.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      }
    },
    {
      "id": "load_collection",
      "summary": "Load a collection",
      "description": "Loads a collection from the current back-end by its id and returns it as processable data cube. The data that is added to the data cube can be restricted with the additional `spatial_extent`, `temporal_extent`, `bands` and `properties`.\n\n**Remarks:**\n\n* The bands (and all dimensions that specify nominal dimension labels) are expected to be ordered as specified in the metadata if the `bands` parameter is set to `null`.\n* If no additional parameter is specified this would imply that the whole data set is expected to be loaded. Due to the large size of many data sets this is not recommended and may be optimized by back-ends to only load the data that is actually required after evaluating subsequent processes such as filters. This means that the pixel values should be processed only after the data has been limited to the required extents and as a consequence also to a manageable size.",
      "categories": [
        "cubes",
        "import"
      ],
      "parameters": [
        {
          "name": "id",
          "description": "The collection id.",
          "schema": {
            "type": "string",
            "subtype": "collection-id",
            "pattern": "^[\\w\\-\\.~/]+$"
          }
        },
        {
          "name": "spatial_extent",
          "description": "Limits the data to load from the collection to the specified bounding box or polygons.\n\nThe process puts a pixel into the data cube if the point at the pixel center intersects with the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC).\n\nThe GeoJSON can be one of the following GeoJSON types:\n\n* A `Polygon` geometry,\n* a `GeometryCollection` containing Polygons,\n* a `Feature` with a `Polygon` geometry or\n* a `FeatureCollection` containing `Feature`s with a `Polygon` geometry.\n\nSet this parameter to `null` to set no limit for the spatial extent. Be careful with this when loading large datasets!",
          "schema": [
            {
              "title": "Bounding Box",
              "type": "object",
              "subtype": "bounding-box",
              "required": [
                "west",
                "south",
                "east",
                "north"
              ],
              "properties": {
                "west": {
                  "description": "West (lower left corner, coordinate axis 1).",
                  "type": "number"
                },
                "south": {
                  "description": "South (lower left corner, coordinate axis 2).",
                  "type": "number"
                },
                "east": {
                  "description": "East (upper right corner, coordinate axis 1).",
                  "type": "number"
                },
                "north": {
                  "description": "North (upper right corner, coordinate axis 2).",
                  "type": "number"
                },
                "base": {
                  "description": "Base (optional, lower left corner, coordinate axis 3).",
                  "type": [
                    "number",
                    "null"
                  ],
                  "default": null
                },
                "height": {
                  "description": "Height (optional, upper right corner, coordinate axis 3).",
                  "type": [
                    "number",
                    "null"
                  ],
                  "default": null
                },
                "crs": {
                  "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
                  "anyOf": [
                    {
                      "title": "EPSG Code",
                      "type": "integer",
                      "subtype": "epsg-code",
                      "minimum": 1000,
                      "examples": [
                        3857
                      ]
                    },
                    {
                      "title": "WKT2",
                      "type": "string",
                      "subtype": "wkt2-definition"
                    },
                    {
                      "title": "PROJ definition",
                      "type": "string",
                      "subtype": "proj-definition",
                      "deprecated": true
                    }
                  ],
                  "default": 4326
                }
              }
            },
            {
              "title": "GeoJSON",
              "type": "object",
              "subtype": "geojson"
            },
            {
              "title": "No filter",
              "description": "Don't filter spatially. All data is included in the data cube.",
              "type": "null"
            }
          ]
        },
        {
          "name": "temporal_extent",
          "description": "Limits the data to load from the collection to the specified left-closed temporal interval. Applies to all temporal dimensions. The interval has to be specified as an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://tools.ietf.org/html/rfc3339). Also supports open intervals by setting one of the boundaries to `null`, but never both.\n\nSet this parameter to `null` to set no limit for the spatial extent. Be careful with this when loading large datasets!",
          "schema": [
            {
              "type": "array",
              "subtype": "temporal-interval",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "subtype": "date-time"
                  },
                  {
                    "type": "string",
                    "format": "date",
                    "subtype": "date"
                  },
                  {
                    "type": "string",
                    "subtype": "year",
                    "minLength": 4,
                    "maxLength": 4,
                    "pattern": "^\\d{4}$"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "examples": [
                [
                  "2015-01-01T00:00:00Z",
                  "2016-01-01T00:00:00Z"
                ],
                [
                  "2015-01-01",
                  "2016-01-01"
                ]
              ]
            },
            {
              "title": "No filter",
              "description": "Don't filter temporally. All data is included in the data cube.",
              "type": "null"
            }
          ]
        },
        {
          "name": "bands",
          "description": "Only adds the specified bands into the data cube so that bands that don't match the list of band names are not available. Applies to all dimensions of type `bands`.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If unique band name and common name conflict, the unique band name has higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. f multiple bands match a common name, all matched bands are included in the original order.",
          "schema": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "subtype": "band-name"
              }
            },
            {
              "title": "No filter",
              "description": "Don't filter bands. All bands are included in the data cube.",
              "type": "null"
            }
          ],
          "default": null,
          "optional": true
        },
        {
          "name": "properties",
          "description": "Limits the data by metadata properties to include only data in the data cube which all given conditions return `true` for (AND operation).\n\nSpecify key-value-pairs with the key being the name of the metadata property, which can be retrieved with the openEO Data Discovery for Collections. The value must a condition (user-defined process) to be evaluated against the collection metadata, see the example.",
          "schema": [
            {
              "type": "object",
              "subtype": "metadata-filter",
              "title": "Filters",
              "description": "A list of filters to check against. Specify key-value-pairs with the key being the name of the metadata property name and the value being a process evaluated against the metadata values.",
              "additionalProperties": {
                "type": "object",
                "subtype": "process-graph",
                "parameters": [
                  {
                    "name": "value",
                    "description": "The property value to be checked against.",
                    "schema": {
                      "description": "Any data type."
                    }
                  }
                ]
              }
            },
            {
              "title": "No filter",
              "description": "Don't filter by metadata properties.",
              "type": "null"
            }
          ],
          "default": null,
          "optional": true
        }
      ],
      "returns": {
        "description": "A data cube for further processing. The dimensions and dimension properties (name, type, labels, reference system and resolution) correspond to the collection's metadata, but the dimension labels are restricted as specified in the parameters.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "examples": [
        {
          "description": "Loading `Sentinel-2B` data from a `Sentinel-2` collection for 2018, but only with cloud cover between 0 and 50%.",
          "arguments": {
            "id": "Sentinel-2",
            "spatial_extent": {
              "west": 16.1,
              "east": 16.6,
              "north": 48.6,
              "south": 47.2
            },
            "temporal_extent": [
              "2018-01-01",
              "2019-01-01"
            ],
            "properties": {
              "eo:cloud_cover": {
                "process_graph": {
                  "cc": {
                    "process_id": "between",
                    "arguments": {
                      "x": {
                        "from_parameter": "value"
                      },
                      "min": 0,
                      "max": 50
                    },
                    "result": true
                  }
                }
              },
              "platform": {
                "process_graph": {
                  "pf": {
                    "process_id": "eq",
                    "arguments": {
                      "x": {
                        "from_parameter": "value"
                      },
                      "y": "Sentinel-2B",
                      "case_sensitive": false
                    },
                    "result": true
                  }
                }
              }
            }
          }
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "https://proj.org/usage/projections.html",
          "title": "PROJ parameters for cartographic projections"
        },
        {
          "rel": "about",
          "href": "http://www.epsg-registry.org",
          "title": "Official EPSG code registry"
        },
        {
          "rel": "about",
          "href": "http://www.epsg.io",
          "title": "Unofficial EPSG code database"
        },
        {
          "href": "http://www.opengeospatial.org/standards/sfa",
          "rel": "about",
          "title": "Simple Features standard by the OGC"
        },
        {
          "rel": "about",
          "href": "https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names",
          "title": "List of common band names as specified by the STAC specification"
        }
      ]
    },
    {
      "id": "save_result",
      "summary": "Save processed data to storage",
      "description": "Saves processed data to the local user workspace / data store of the authenticated user. This process aims to be compatible to GDAL/OGR formats and options. STAC-compatible metadata should be stored with the processed data.\n\nCalling this process may be rejected by back-ends in the context of secondary web services.",
      "categories": [
        "cubes",
        "export"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "The data to save.",
          "schema": [
            {
              "type": "object",
              "subtype": "raster-cube"
            },
            {
              "type": "object",
              "subtype": "vector-cube"
            }
          ]
        },
        {
          "name": "format",
          "description": "The file format to save to. It must be one of the values that the server reports as supported output file formats, which usually correspond to the short GDAL/OGR codes. If the format is not suitable for storing the underlying data structure, a `FormatUnsuitable` exception will be thrown. This parameter is *case insensitive*.",
          "schema": {
            "type": "string",
            "subtype": "output-format"
          }
        },
        {
          "name": "options",
          "description": "The file format parameters to be used to create the file(s). Must correspond to the parameters that the server reports as supported parameters for the chosen `format`. The parameter names and valid values usually correspond to the GDAL/OGR format options.",
          "schema": {
            "type": "object",
            "subtype": "output-format-options"
          },
          "default": {},
          "optional": true
        }
      ],
      "returns": {
        "description": "`false` if saving failed, `true` otherwise.",
        "schema": {
          "type": "boolean"
        }
      },
      "exceptions": {
        "FormatUnsuitable": {
          "message": "Data can't be transformed into the requested output format."
        }
      },
      "links": [
        {
          "rel": "about",
          "href": "https://www.gdal.org/formats_list.html",
          "title": "GDAL Raster Formats"
        },
        {
          "rel": "about",
          "href": "https://www.gdal.org/ogr_formats.html",
          "title": "OGR Vector Formats"
        }
      ]
    },
    {
      "id": "filter_bands",
      "summary": "Filter the bands by name",
      "description": "Filters the bands in the data cube so that bands that don't match any of the criteria are dropped from the data cube. The data cube is expected to have only one dimension of type `bands`. Fails with a `DimensionMissing` error if no such dimension exists.\n\nThe following criteria can be used to select bands:\n\n* `bands`: band name or common band name (e.g. `B01`, `B8A`, `red` or `nir`)\n* `wavelengths`: ranges of wavelengths in micrometres (?m) (e.g. 0.5 - 0.6)\n\nAll these information are exposed in the band metadata of the collection. To keep algorithms interoperable it is recommended to prefer the common bands names or the wavelengths over collection and/or back-end specific band names.\n\nIf multiple criteria are specified, any of them must match and not all of them, i.e. they are combined with an OR-operation. If no criteria is specified, the `BandFilterParameterMissing` exception must be thrown.\n\n**Important:** The order of the specified array defines the order of the bands in the data cube, which can be important for subsequent processes. If multiple bands are matched by a single criterion (e.g. a range of wavelengths), they stay in the original order.",
      "categories": [
        "cubes",
        "filter"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube with bands.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "bands",
          "description": "A list of band names. Either the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands). If unique band name and common name conflict, the unique band name has higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.",
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "subtype": "band-name"
            }
          },
          "default": [],
          "optional": true
        },
        {
          "name": "wavelengths",
          "description": "A list of sub-lists with each sub-list consisting of two elements. The first element is the minimum wavelength and the second element is the maximum wavelength. Wavelengths are specified in micrometres (?m).\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match the wavelengths, all matched bands are included in the original order.",
          "schema": {
            "type": "array",
            "items": {
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "number"
              },
              "examples": [
                [
                  [
                    0.45,
                    0.5
                  ],
                  [
                    0.6,
                    0.7
                  ]
                ]
              ]
            }
          },
          "default": [],
          "optional": true
        }
      ],
      "returns": {
        "description": "A data cube limited to a subset of its original bands. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the dimension of type `bands` has less (or the same) dimension labels.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "BandFilterParameterMissing": {
          "message": "The process 'filter_bands' requires any of the parameters 'bands', 'common_names' or 'wavelengths' to be set."
        },
        "DimensionMissing": {
          "message": "A band dimension is missing."
        }
      },
      "links": [
        {
          "rel": "about",
          "href": "https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names",
          "title": "List of common band names as specified by the STAC specification"
        }
      ]
    },
    {
      "id": "filter_temporal",
      "summary": "Temporal filter for a temporal intervals",
      "description": "Limits the data cube to the specified interval of dates and/or times.\n\nMore precisely, the filter checks whether the temporal dimension label is greater than or equal to the lower boundary (start date/time) and the temporal dimension label is less than the value of the upper boundary (end date/time). This corresponds to a left-closed interval, which contains the lower boundary but not the upper boundary.\n\nIf the dimension is set to `null` (it's the default value), the data cube is expected to only have one temporal dimension.",
      "categories": [
        "cubes",
        "filter"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "extent",
          "description": "Left-closed temporal interval, i.e. an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://tools.ietf.org/html/rfc3339). Also supports open intervals by setting one of the boundaries to `null`, but never both.",
          "schema": {
            "type": "array",
            "subtype": "temporal-interval",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time",
                  "subtype": "date-time"
                },
                {
                  "type": "string",
                  "format": "date",
                  "subtype": "date"
                },
                {
                  "type": "string",
                  "subtype": "year",
                  "minLength": 4,
                  "maxLength": 4,
                  "pattern": "^\\d{4}$"
                },
                {
                  "type": "null"
                }
              ]
            },
            "examples": [
              [
                "2015-01-01T00:00:00Z",
                "2016-01-01T00:00:00Z"
              ],
              [
                "2015-01-01",
                "2016-01-01"
              ]
            ]
          }
        },
        {
          "name": "dimension",
          "description": "The name of the temporal dimension to filter on. If the dimension is not set or is set to `null`, the filter applies to all temporal dimensions. Fails with a `DimensionNotAvailable` error if the specified dimension does not exist.",
          "schema": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": null,
          "optional": true
        }
      ],
      "returns": {
        "description": "A data cube restricted to the specified temporal extent. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the given temporal dimension(s) have less (or the same) dimension labels.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "DimensionNotAvailable": {
          "message": "A dimension with the specified name does not exist."
        }
      }
    },
    {
      "id": "resample_cube_temporal",
      "summary": "Resample a temporal dimension to match a target data cube",
      "description": "Resamples the given temporal dimension from a source data cube to align with the corresponding dimension of the given target data cube. Returns a new data cube with the resampled dimension.\n\nIf the dimension is not set or is set to `null`, the data cube is expected to have one temporal dimension only.",
      "categories": [
        "cubes",
        "aggregate & resample"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "target",
          "description": "A data cube that describes the temporal target resolution.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "method",
          "description": "A resampling method to be applied, could be a reducer for downsampling or other methods for upsampling. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "data",
                "description": "A labeled array with elements of any type.",
                "schema": {
                  "type": "array",
                  "subtype": "labeled-array",
                  "items": {
                    "description": "Any data type."
                  }
                }
              },
              {
                "name": "context",
                "description": "Additional data passed by the user.",
                "schema": {
                  "description": "Any data type."
                },
                "optional": true,
                "default": null
              }
            ]
          }
        },
        {
          "name": "dimension",
          "description": "The name of the temporal dimension to resample, which must exist with this name in both data cubes. If the dimension is not set or is set to `null`, the data cube is expected to only have one temporal dimension. Fails with a `TooManyDimensions` error if it has more dimensions. Fails with a `DimensionNotAvailable` error if the specified dimension does not exist.",
          "schema": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": null,
          "optional": true
        },
        {
          "name": "context",
          "description": "Additional data to be passed to the process specified for the parameter `method`.",
          "schema": {
            "description": "Any data type."
          },
          "optional": true,
          "default": null
        }
      ],
      "returns": {
        "description": "A raster data cube with the same dimensions and the same dimension properties (name, type, labels, reference system and resolution) for all non-temporal dimensions. For the temporal dimension the name and type remain unchanged, but the reference system changes and the labels and resolution may change.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "TooManyDimensions": {
          "message": "The number of temporal dimensions must be reduced to one for 'resample_cube_temporal'."
        },
        "DimensionNotAvailable": {
          "message": "A dimension with the specified name does not exist."
        }
      },
      "links": [
        {
          "href": "https://openeo.org/documentation/1.0/glossary.html#resample-changing-data-cube-geometry",
          "rel": "about",
          "title": "Resampling explained in the openEO glossary"
        }
      ]
    },
    {
      "id": "resample_cube_spatial",
      "summary": "Resample the spatial dimensions to match a target data cube",
      "description": "Resamples the spatial dimensions (x,y) from a source data cube to align with the corresponding dimensions of the given target data cube. Returns a new data cube with the resampled dimensions.\n\nTo resample a data cube to a specific resolution or projection regardless of an existing target data cube, refer to ``resample_spatial()``.",
      "categories": [
        "cubes",
        "aggregate & resample"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "target",
          "description": "A data cube that describes the spatial target resolution.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "method",
          "description": "Resampling method. Methods are inspired by GDAL, see [gdalwarp](https://www.gdal.org/gdalwarp.html) for more information.",
          "schema": {
            "type": "string",
            "enum": [
              "near",
              "bilinear",
              "cubic",
              "cubicspline",
              "lanczos",
              "average",
              "mode",
              "max",
              "min",
              "med",
              "q1",
              "q3"
            ]
          },
          "default": "near",
          "optional": true
        }
      ],
      "returns": {
        "description": "A data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except for the resolution and dimension labels of the spatial dimensions.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "links": [
        {
          "href": "https://openeo.org/documentation/1.0/glossary.html#resample-changing-data-cube-geometry",
          "rel": "about",
          "title": "Resampling explained in the openEO glossary"
        }
      ]
    },
    {
      "id": "if",
      "summary": "If-Then-Else conditional",
      "description": "If the value passed is `true`, returns the value of the `accept` parameter, otherwise returns the value of the `reject` parameter.\n\nThis is basically an if-then-else construct as in other programming languages.",
      "categories": [
        "logic",
        "comparison",
        "masks"
      ],
      "parameters": [
        {
          "name": "value",
          "description": "A boolean value.",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        {
          "name": "accept",
          "description": "A value that is returned if the boolean value is `true`.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "reject",
          "description": "A value that is returned if the boolean value is **not** `true`. Defaults to `null`.",
          "schema": {
            "description": "Any data type is allowed."
          },
          "default": null,
          "optional": true
        }
      ],
      "returns": {
        "description": "Either the `accept` or `reject` argument depending on the given boolean value.",
        "schema": {
          "description": "Any data type is allowed."
        }
      },
      "examples": [
        {
          "arguments": {
            "value": true,
            "accept": "A",
            "reject": "B"
          },
          "returns": "A"
        },
        {
          "arguments": {
            "value": null,
            "accept": "A",
            "reject": "B"
          },
          "returns": "B"
        },
        {
          "arguments": {
            "value": false,
            "accept": [
              1,
              2,
              3
            ],
            "reject": [
              4,
              5,
              6
            ]
          },
          "returns": [
            4,
            5,
            6
          ]
        },
        {
          "arguments": {
            "value": true,
            "accept": 123
          },
          "returns": 123
        },
        {
          "arguments": {
            "value": false,
            "accept": 1
          },
          "returns": null
        }
      ]
    },
    {
      "id": "mask",
      "summary": "Apply a raster mask",
      "description": "Applies a mask to a raster data cube. To apply a vector mask use ``mask_polygon()``.\n\nA mask is a raster data cube for which corresponding pixels among `data` and `mask` are compared and those pixels in `data` are replaced whose pixels in `mask` are non-zero (for numbers) or `true` (for boolean values). The pixel values are replaced with the value specified for `replacement`, which defaults to `null` (no data).\n\nThe data cubes have to be compatible so that each dimension in mask must also be available in the raster data cube with the same name, type, reference system, resolution and labels. Dimensions can be missing in the mask with the result that the mask is applied for each label of the missing dimension in the data cube. The process fails if there's an incompatibility found between the raster data cube and the mask.",
      "categories": [
        "masks"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A raster data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "mask",
          "description": "A mask as raster data cube. Every pixel in `data` must have a corresponding element in `mask`.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "replacement",
          "description": "The value used to replace masked values with.",
          "schema": {
            "type": [
              "number",
              "boolean",
              "string",
              "null"
            ]
          },
          "default": null,
          "optional": true
        }
      ],
      "returns": {
        "description": "A masked raster data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      }
    },
    {
      "id": "merge_cubes",
      "summary": "Merging two data cubes",
      "description": "The data cubes have to be compatible. A merge operation without overlap should be reversible with (a set of) filter operations for each of the two cubes. The process performs the join on overlapping dimensions, with the same name and type.\n\nAn overlapping dimension has the same name, type, reference system and resolution in both dimensions, but can have different labels. One of the dimensions can have different labels, for all other dimensions the labels must be equal. If data overlaps, the parameter `overlap_resolver` must be specified to resolve the overlap.\n\n**Examples for merging two data cubes:**\n\n1. Data cubes with the dimensions `x`, `y`, `t` and `bands` have the same dimension labels in `x`,`y` and `t`, but the labels for the dimension `bands` are `B1` and `B2` for the first cube and `B3` and `B4`. An overlap resolver is *not needed*. The merged data cube has the dimensions `x`, `y`, `t` and `bands` and the dimension `bands` has four dimension labels: `B1`, `B2`, `B3`, `B4`.\n2. Data cubes with the dimensions `x`, `y`, `t` and `bands` have the same dimension labels in `x`,`y` and `t`, but the labels for the dimension `bands` are `B1` and `B2` for the first data cube and `B2` and `B3` for the second. An overlap resolver is *required* to resolve overlap in band `B2`. The merged data cube has the dimensions `x`, `y`, `t` and `bands` and the dimension `bands` has three dimension labels: `B1`, `B2`, `B3`.\n3. Data cubes with the dimensions `x`, `y` and `t` have the same dimension labels in `x`,`y` and `t`. There are two options:\n   1. Keep the overlapping values separately in the merged data cube: An overlap resolver is *not needed*, but for each data cube you need to add a new dimension using ``add_dimension()``. The new dimensions must be equal, except that the labels for the new dimensions must differ by name. The merged data cube has the same dimensions and labels as the original data cubes, plus the dimension added with ``add_dimension()``, which has the two dimension labels after the merge.\n   2. Combine the overlapping values into a single value: An overlap resolver is *required* to resolve the overlap for all pixels. The merged data cube has the same dimensions and labels as the original data cubes, but all pixel values have been processed by the overlap resolver.\n4. Merging a data cube with dimensions `x`, `y`, `t` with another cube with dimensions `x`, `y` will join on the `x`, `y` dimension, so the lower dimension cube is merged with each time step in the higher dimensional cube. This can for instance be used to apply a digital elevation model to a spatiotemporal data cube.",
      "categories": [
        "cubes"
      ],
      "parameters": [
        {
          "name": "cube1",
          "description": "The first data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "cube2",
          "description": "The second data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "overlap_resolver",
          "description": "A reduction operator that resolves the conflict if the data overlaps. The reducer must return a value of the same data type as the input values are. The reduction operator may be a single process such as ``multiply()`` or consist of multiple sub-processes. `null` (the default) can be specified if no overlap resolver is required.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "x",
                "description": "The first value.",
                "schema": {
                  "description": "Any data type."
                }
              },
              {
                "name": "y",
                "description": "The second value.",
                "schema": {
                  "description": "Any data type."
                }
              },
              {
                "name": "context",
                "description": "Additional data passed by the user.",
                "schema": {
                  "description": "Any data type."
                },
                "optional": true,
                "default": null
              }
            ]
          },
          "default": null,
          "optional": true
        },
        {
          "name": "context",
          "description": "Additional data to be passed to the overlap resolver.",
          "schema": {
            "description": "Any data type."
          },
          "optional": true,
          "default": null
        }
      ],
      "returns": {
        "description": "The merged data cube. See the process description for details regarding the dimensions and dimension properties (name, type, labels, reference system and resolution).",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "OverlapResolverMissing": {
          "message": "Overlapping data cubes, but no overlap resolver has been specified."
        }
      },
      "links": [
        {
          "rel": "about",
          "href": "https://en.wikipedia.org/wiki/Reduction_Operator",
          "title": "Background information on reduction operators (binary reducers) by Wikipedia"
        }
      ]
    },
    {
      "id": "reduce_dimension",
      "summary": "Reduce dimensions",
      "description": "Applies a unary reducer to a data cube dimension by collapsing all the pixel values along the specified dimension into an output value computed by the reducer. This process passes a list of values to the reducer. In contrast, ``reduce_dimension_binary()`` passes two values, which may be better suited especially for UDFs in case the number of values gets too large to be processed at once.\n\nThe dimension is dropped. To avoid this, use ``apply_dimension()`` instead.",
      "categories": [
        "cubes",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "reducer",
          "description": "A reducer to apply on the specified dimension. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "data",
                "description": "A labeled array with elements of any type.",
                "schema": {
                  "type": "array",
                  "subtype": "labeled-array",
                  "items": {
                    "description": "Any data type."
                  }
                }
              },
              {
                "name": "context",
                "description": "Additional data passed by the user.",
                "schema": {
                  "description": "Any data type."
                },
                "optional": true,
                "default": null
              }
            ]
          }
        },
        {
          "name": "dimension",
          "description": "The name of the dimension over which to reduce. Fails with a `DimensionNotAvailable` error if the specified dimension does not exist.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "context",
          "description": "Additional data to be passed to the reducer.",
          "schema": {
            "description": "Any data type."
          },
          "optional": true,
          "default": null
        }
      ],
      "returns": {
        "description": "A data cube with the newly computed values. It is missing the given dimension, the number of dimensions decreases by one. The dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      },
      "exceptions": {
        "DimensionNotAvailable": {
          "message": "A dimension with the specified name does not exist."
        }
      }
    },
    {
      "id": "absolute",
      "summary": "Absolute value",
      "description": "Computes the absolute value of a real number `x`, which is the \"unsigned\" portion of x and often denoted as *|x|*.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
      "categories": [
        "math"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "A number.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "The computed absolute value.",
        "schema": {
          "type": [
            "number",
            "null"
          ],
          "minimum": 0
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 0
          },
          "returns": 0
        },
        {
          "arguments": {
            "x": 3.5
          },
          "returns": 3.5
        },
        {
          "arguments": {
            "x": -0.4
          },
          "returns": 0.4
        },
        {
          "arguments": {
            "x": -3.5
          },
          "returns": 3.5
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/AbsoluteValue.html",
          "title": "Absolute value explained by Wolfram MathWorld"
        }
      ],
      "process_graph": {
        "lt": {
          "process_id": "lt",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": 0
          }
        },
        "multiply": {
          "process_id": "multiply",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": -1
          }
        },
        "if": {
          "process_id": "if",
          "arguments": {
            "value": {
              "from_node": "lt"
            },
            "accept": {
              "from_node": "multiply"
            },
            "reject": {
              "from_parameter": "x"
            }
          },
          "result": true
        }
      }
    },
    {
      "id": "and",
      "summary": "Logical AND",
      "description": "Checks if **both** values are true.\n\nEvaluates parameter `x` before `y` and stops once the outcome is unambiguous. If any argument is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null  | false | true\n----- || ----- | ----- | -----\nnull  || null  | false | null\nfalse || false | false | false\ntrue  || null  | false | true\n```",
      "categories": [
        "logic"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "A boolean value.",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        {
          "name": "y",
          "description": "A boolean value.",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "Boolean result of the logical AND.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": true,
            "y": true
          },
          "returns": true
        },
        {
          "arguments": {
            "x": true,
            "y": false
          },
          "returns": false
        },
        {
          "arguments": {
            "x": false,
            "y": false
          },
          "returns": false
        },
        {
          "arguments": {
            "x": false,
            "y": null
          },
          "returns": false
        },
        {
          "arguments": {
            "x": true,
            "y": null
          },
          "returns": null
        }
      ],
      "process_graph": {
        "all": {
          "process_id": "all",
          "arguments": {
            "data": [
              {
                "from_parameter": "x"
              },
              {
                "from_parameter": "y"
              }
            ],
            "ignore_nodata": false
          },
          "result": true
        }
      }
    },
    {
      "id": "or",
      "summary": "Logical OR",
      "description": "Checks if **at least one** of the values is true. Evaluates parameter `x` before `y` and stops once the outcome is unambiguous. If a component is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null | false | true\n----- || ---- | ----- | ----\nnull  || null | null  | true\nfalse || null | false | true\ntrue  || true | true  | true\n```",
      "categories": [
        "logic"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "A boolean value.",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        {
          "name": "y",
          "description": "A boolean value.",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "Boolean result of the logical OR.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": true,
            "y": true
          },
          "returns": true
        },
        {
          "arguments": {
            "x": false,
            "y": false
          },
          "returns": false
        },
        {
          "arguments": {
            "x": true,
            "y": null
          },
          "returns": true
        },
        {
          "arguments": {
            "x": null,
            "y": true
          },
          "returns": true
        },
        {
          "arguments": {
            "x": false,
            "y": null
          },
          "returns": null
        }
      ],
      "process_graph": {
        "any": {
          "process_id": "any",
          "arguments": {
            "data": [
              {
                "from_parameter": "x"
              },
              {
                "from_parameter": "y"
              }
            ],
            "ignore_nodata": false
          },
          "result": true
        }
      }
    },
    {
      "id": "not",
      "summary": "Inverting a boolean",
      "description": "Inverts a single boolean so that `true` gets `false` and `false` gets `true`.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
      "categories": [
        "logic"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "Boolean value to invert.",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "Inverted boolean value.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": null
          },
          "returns": null
        },
        {
          "arguments": {
            "x": false
          },
          "returns": true
        },
        {
          "arguments": {
            "x": true
          },
          "returns": false
        }
      ]
    },
    {
      "id": "sqrt",
      "summary": "Square root",
      "description": "Computes the square root of a real number `x`, which is equal to calculating `x` to the power of *0.5*.\n\nA square root of x is a number a such that *a^2^ = x*. Therefore, the square root is the inverse function of a to the power of 2, but only for *a >= 0*.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
      "categories": [
        "math",
        "math > exponential & logarithmic"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "A number.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "The computed square root.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 0
          },
          "returns": 0
        },
        {
          "arguments": {
            "x": 1
          },
          "returns": 1
        },
        {
          "arguments": {
            "x": 9
          },
          "returns": 3
        },
        {
          "arguments": {
            "x": null
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/SquareRoot.html",
          "title": "Square root explained by Wolfram MathWorld"
        }
      ],
      "process_graph": {
        "power": {
          "process_id": "power",
          "arguments": {
            "base": {
              "from_parameter": "x"
            },
            "p": 0.5
          },
          "result": true
        }
      }
    },
    {
      "id": "power",
      "summary": "Exponentiation",
      "description": "Computes the exponentiation for the base `base` raised to the power of `p`.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.",
      "categories": [
        "math",
        "math > exponential & logarithmic"
      ],
      "parameters": [
        {
          "name": "base",
          "description": "The numerical base.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        {
          "name": "p",
          "description": "The numerical exponent.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "The computed value for `base` raised to the power of `p`.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "base": 0,
            "p": 2
          },
          "returns": 0
        },
        {
          "arguments": {
            "base": 2.5,
            "p": 0
          },
          "returns": 1
        },
        {
          "arguments": {
            "base": 3,
            "p": 3
          },
          "returns": 27
        },
        {
          "arguments": {
            "base": 5,
            "p": -1
          },
          "returns": 0.2
        },
        {
          "arguments": {
            "base": 1,
            "p": 0.5
          },
          "returns": 1
        },
        {
          "arguments": {
            "base": 1,
            "p": null
          },
          "returns": null
        },
        {
          "arguments": {
            "base": null,
            "p": 2
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Power.html",
          "title": "Power explained by Wolfram MathWorld"
        }
      ]
    },
    {
      "id": "gte",
      "summary": "Greater than or equal to comparison",
      "description": "Compares whether `x` is greater than or equal to `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`. Therefore, `gte(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* If the operands are not equal (see process ``eq()``) and any of them is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.",
      "categories": [
        "comparison"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "First operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "y",
          "description": "Second operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        }
      ],
      "returns": {
        "description": "`true` if `x` is greater than or equal to `y`, `null` if any operand is `null`, otherwise `false`.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        },
        {
          "arguments": {
            "x": 0,
            "y": 0
          },
          "returns": true
        },
        {
          "arguments": {
            "x": 1,
            "y": 2
          },
          "returns": false
        },
        {
          "arguments": {
            "x": -0.5,
            "y": -0.6
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "00:00:00Z",
            "y": "00:00:00+01:00"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "1950-01-01T00:00:00Z",
            "y": "2018-01-01T12:00:00Z"
          },
          "returns": false
        },
        {
          "arguments": {
            "x": "2018-01-01T12:00:00+00:00",
            "y": "2018-01-01T12:00:00Z"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": true,
            "y": false
          },
          "returns": false
        },
        {
          "arguments": {
            "x": [
              1,
              2,
              3
            ],
            "y": [
              1,
              2,
              3
            ]
          },
          "returns": false
        }
      ],
      "process_graph": {
        "eq": {
          "process_id": "eq",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": {
              "from_parameter": "y"
            }
          }
        },
        "gt": {
          "process_id": "gt",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": {
              "from_parameter": "y"
            }
          }
        },
        "or": {
          "process_id": "or",
          "arguments": {
            "x": {
              "from_node": "gt"
            },
            "y": {
              "from_node": "eq"
            }
          },
          "result": true
        }
      }
    },
    {
      "id": "gt",
      "summary": "Greater than comparison",
      "description": "Compares whether `x` is strictly greater than `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If any operand is an array or object, the return value is `false`.\n* If any operand is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.",
      "categories": [
        "comparison"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "First operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "y",
          "description": "Second operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        }
      ],
      "returns": {
        "description": "`true` if `x` is strictly greater than `y` or `null` if any operand is `null`, otherwise `false`.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        },
        {
          "arguments": {
            "x": 0,
            "y": 0
          },
          "returns": false
        },
        {
          "arguments": {
            "x": 2,
            "y": 1
          },
          "returns": true
        },
        {
          "arguments": {
            "x": -0.5,
            "y": -0.6
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "00:00:00Z",
            "y": "00:00:00+01:00"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "1950-01-01T00:00:00Z",
            "y": "2018-01-01T12:00:00Z"
          },
          "returns": false
        },
        {
          "arguments": {
            "x": "2018-01-01T12:00:00+00:00",
            "y": "2018-01-01T12:00:00Z"
          },
          "returns": false
        },
        {
          "arguments": {
            "x": true,
            "y": 0
          },
          "returns": false
        },
        {
          "arguments": {
            "x": true,
            "y": false
          },
          "returns": false
        }
      ]
    },
    {
      "id": "eq",
      "summary": "Equal to comparison",
      "description": "Compares whether `x` is strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly, for example a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`. Therefore, `eq(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings MUST be compared differently than other strings and MUST NOT be compared based on their string representation due to different possible representations. For example, the UTC time zone representation `Z` has the same meaning as `+00:00`.",
      "categories": [
        "texts",
        "comparison"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "First operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "y",
          "description": "Second operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "delta",
          "description": "Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `lte(abs(minus([x, y]), delta)`",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          },
          "default": null,
          "optional": true
        },
        {
          "name": "case_sensitive",
          "description": "Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "Returns `true` if `x` is equal to `y`, `null` if any operand is `null`, otherwise `false`.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        },
        {
          "arguments": {
            "x": null,
            "y": null
          },
          "returns": null
        },
        {
          "arguments": {
            "x": 1,
            "y": 1
          },
          "returns": true
        },
        {
          "arguments": {
            "x": 1,
            "y": "1"
          },
          "returns": false
        },
        {
          "arguments": {
            "x": 0,
            "y": false
          },
          "returns": false
        },
        {
          "arguments": {
            "x": 1.02,
            "y": 1,
            "delta": 0.01
          },
          "returns": false
        },
        {
          "arguments": {
            "x": -1,
            "y": -1.001,
            "delta": 0.01
          },
          "returns": true
        },
        {
          "arguments": {
            "x": 115,
            "y": 110,
            "delta": 10
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "Test",
            "y": "test"
          },
          "returns": false
        },
        {
          "arguments": {
            "x": "Test",
            "y": "test",
            "case_sensitive": false
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "Ä",
            "y": "ä",
            "case_sensitive": false
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "00:00:00+00:00",
            "y": "00:00:00Z"
          },
          "returns": true
        },
        {
          "description": "`y` is not a valid date-time representation and therefore will be treated as a string so that the provided values are not equal.",
          "arguments": {
            "x": "2018-01-01T12:00:00Z",
            "y": "2018-01-01T12:00:00"
          },
          "returns": false
        },
        {
          "description": "01:00 in the time zone +1 is equal to 00:00 in UTC.",
          "arguments": {
            "x": "2018-01-01T00:00:00Z",
            "y": "2018-01-01T01:00:00+01:00"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": [
              1,
              2,
              3
            ],
            "y": [
              1,
              2,
              3
            ]
          },
          "returns": false
        }
      ]
    },
    {
      "id": "lt",
      "summary": "Less than comparison",
      "description": "Compares whether `x` is strictly less than `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If any operand is an array or object, the return value is `false`.\n* If any operand is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.",
      "categories": [
        "comparison"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "First operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "y",
          "description": "Second operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        }
      ],
      "returns": {
        "description": "`true` if `x` is strictly less than `y`, `null` if any operand is `null`, otherwise `false`.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        },
        {
          "arguments": {
            "x": 0,
            "y": 0
          },
          "returns": false
        },
        {
          "arguments": {
            "x": 1,
            "y": 2
          },
          "returns": true
        },
        {
          "arguments": {
            "x": -0.5,
            "y": -0.6
          },
          "returns": false
        },
        {
          "arguments": {
            "x": "00:00:00+01:00",
            "y": "00:00:00Z"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "1950-01-01T00:00:00Z",
            "y": "2018-01-01T12:00:00Z"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "2018-01-01T12:00:00+00:00",
            "y": "2018-01-01T12:00:00Z"
          },
          "returns": false
        },
        {
          "arguments": {
            "x": 0,
            "y": true
          },
          "returns": false
        },
        {
          "arguments": {
            "x": false,
            "y": true
          },
          "returns": false
        }
      ]
    },
    {
      "id": "lte",
      "summary": "Less than or equal to comparison",
      "description": "Compares whether `x` is less than or equal to `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`. Therefore, `lte(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* If the operands are not equal (see process ``eq()``) and any of them is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.",
      "categories": [
        "comparison"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "First operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "y",
          "description": "Second operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        }
      ],
      "returns": {
        "description": "`true` if `x` is less than or equal to `y`, `null` if any operand is `null`, otherwise `false`.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        },
        {
          "arguments": {
            "x": 0,
            "y": 0
          },
          "returns": true
        },
        {
          "arguments": {
            "x": 1,
            "y": 2
          },
          "returns": true
        },
        {
          "arguments": {
            "x": -0.5,
            "y": -0.6
          },
          "returns": false
        },
        {
          "arguments": {
            "x": "00:00:00+01:00",
            "y": "00:00:00Z"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "1950-01-01T00:00:00Z",
            "y": "2018-01-01T12:00:00Z"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "2018-01-01T12:00:00+00:00",
            "y": "2018-01-01T12:00:00Z"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": false,
            "y": true
          },
          "returns": false
        },
        {
          "arguments": {
            "x": [
              1,
              2,
              3
            ],
            "y": [
              1,
              2,
              3
            ]
          },
          "returns": false
        }
      ],
      "process_graph": {
        "eq": {
          "process_id": "eq",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": {
              "from_parameter": "y"
            }
          }
        },
        "lt": {
          "process_id": "lt",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": {
              "from_parameter": "y"
            }
          }
        },
        "or": {
          "process_id": "or",
          "arguments": {
            "x": {
              "from_node": "lt"
            },
            "y": {
              "from_node": "eq"
            }
          },
          "result": true
        }
      }
    },
    {
      "id": "neq",
      "summary": "Not equal to comparison",
      "description": "Compares whether `x` is *not* strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly, for example a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`. Therefore, `neq(null, null)` returns `null` instead of `false`.\n* If any operand is an array or object, the return value is `false`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings MUST be compared differently than other strings and MUST NOT be compared based on their string representation due to different possible representations. For example, the UTC time zone representation `Z` has the same meaning as `+00:00`.",
      "categories": [
        "texts",
        "comparison"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "First operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "y",
          "description": "Second operand.",
          "schema": {
            "description": "Any data type is allowed."
          }
        },
        {
          "name": "delta",
          "description": "Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the non-equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `gt(abs(minus([x, y]), delta)`",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          },
          "default": null,
          "optional": true
        },
        {
          "name": "case_sensitive",
          "description": "Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "Returns `true` if `x` is *not* equal to `y`, `null` if any operand is `null`, otherwise `false`.",
        "schema": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        },
        {
          "arguments": {
            "x": 1,
            "y": 1
          },
          "returns": false
        },
        {
          "arguments": {
            "x": 1,
            "y": "1"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": 0,
            "y": false
          },
          "returns": true
        },
        {
          "arguments": {
            "x": 1.02,
            "y": 1,
            "delta": 0.01
          },
          "returns": true
        },
        {
          "arguments": {
            "x": -1,
            "y": -1.001,
            "delta": 0.01
          },
          "returns": false
        },
        {
          "arguments": {
            "x": 115,
            "y": 110,
            "delta": 10
          },
          "returns": false
        },
        {
          "arguments": {
            "x": "Test",
            "y": "test"
          },
          "returns": true
        },
        {
          "arguments": {
            "x": "Test",
            "y": "test",
            "case_sensitive": false
          },
          "returns": false
        },
        {
          "arguments": {
            "x": "Ä",
            "y": "ä",
            "case_sensitive": false
          },
          "returns": false
        },
        {
          "arguments": {
            "x": "00:00:00+00:00",
            "y": "00:00:00Z"
          },
          "returns": false
        },
        {
          "description": "`y` is not a valid date-time representation and therefore will be treated as a string so that the provided values are not equal.",
          "arguments": {
            "x": "2018-01-01T12:00:00Z",
            "y": "2018-01-01T12:00:00"
          },
          "returns": true
        },
        {
          "description": "01:00 in the time zone +1 is equal to 00:00 in UTC.",
          "arguments": {
            "x": "2018-01-01T00:00:00Z",
            "y": "2018-01-01T01:00:00+01:00"
          },
          "returns": false
        },
        {
          "arguments": {
            "x": [
              1,
              2,
              3
            ],
            "y": [
              1,
              2,
              3
            ]
          },
          "returns": false
        }
      ],
      "process_graph": {
        "eq": {
          "process_id": "eq",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": {
              "from_parameter": "y"
            },
            "delta": {
              "from_parameter": "delta"
            },
            "case_sensitive": {
              "from_parameter": "case_sensitive"
            }
          }
        },
        "not": {
          "process_id": "not",
          "arguments": {
            "x": {
              "from_node": "eq"
            }
          },
          "result": true
        }
      }
    },
    {
      "id": "array_element",
      "summary": "Get an element from an array",
      "description": "Returns the element with the specified index or label from the array.\n\nEither the parameter `index` or `label` must be specified, otherwise the `ArrayElementParameterMissing` exception is thrown. If both parameters are set the `ArrayElementParameterConflict` exception is thrown.",
      "categories": [
        "arrays",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "An array.",
          "schema": {
            "type": "array",
            "items": {
              "description": "Any data type is allowed."
            }
          }
        },
        {
          "name": "index",
          "description": "The zero-based index of the element to retrieve.",
          "schema": {
            "type": "integer"
          },
          "optional": true
        },
        {
          "name": "label",
          "description": "The label of the element to retrieve.",
          "schema": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true
        },
        {
          "name": "return_nodata",
          "description": "By default this process throws an `ArrayElementNotAvailable` exception if the index or label is invalid. If you want to return `null` instead, set this flag to `true`.",
          "schema": {
            "type": "boolean"
          },
          "default": false,
          "optional": true
        }
      ],
      "returns": {
        "description": "The value of the requested element.",
        "schema": {
          "description": "Any data type is allowed."
        }
      },
      "exceptions": {
        "ArrayElementNotAvailable": {
          "message": "The array has no element with the specified index or label."
        },
        "ArrayElementParameterMissing": {
          "message": "The process 'array_element' requires either the 'index' or 'labels' parameter to be set."
        },
        "ArrayElementParameterConflict": {
          "message": "The process 'array_element' only allows that either the 'index' or the 'labels' parameter is set."
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              9,
              8,
              7,
              6,
              5
            ],
            "index": 2
          },
          "returns": 7
        },
        {
          "arguments": {
            "data": [
              "A",
              "B",
              "C"
            ],
            "index": 0
          },
          "returns": "A"
        },
        {
          "arguments": {
            "data": [],
            "index": 0,
            "return_nodata": true
          },
          "returns": null
        }
      ]
    },
    {
      "id": "multiply",
      "summary": "Multiplication of two numbers",
      "description": "Multiplies the two numbers `x` and `y` (*x * y*) and returns the computed product.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
      "categories": [
        "math"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "The multiplier.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        {
          "name": "y",
          "description": "The multiplicand.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "The computed product of the two numbers.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "exceptions": {
        "MultiplicandMissing": {
          "message": "Multiplication requires at least two numbers."
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 5,
            "y": 2.5
          },
          "returns": 12.5
        },
        {
          "arguments": {
            "x": -2,
            "y": -4
          },
          "returns": 8
        },
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Product.html",
          "title": "Product explained by Wolfram MathWorld"
        },
        {
          "rel": "about",
          "href": "https://ieeexplore.ieee.org/document/8766229",
          "title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
        }
      ],
      "process_graph": {
        "product": {
          "process_id": "product",
          "arguments": {
            "data": [
              {
                "from_parameter": "x"
              },
              {
                "from_parameter": "y"
              }
            ],
            "ignore_nodata": false
          },
          "result": true
        }
      }
    },
    {
      "id": "add",
      "summary": "Addition of two numbers",
      "description": "Sums up the two numbers `x` and `y` (*x + y*) and returns the computed sum.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
      "categories": [
        "math"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "The first summand.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        {
          "name": "y",
          "description": "The second summand.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "The computed sum of the two numbers.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 5,
            "y": 2.5
          },
          "returns": 7.5
        },
        {
          "arguments": {
            "x": -2,
            "y": -4
          },
          "returns": -6
        },
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Sum.html",
          "title": "Sum explained by Wolfram MathWorld"
        },
        {
          "rel": "about",
          "href": "https://ieeexplore.ieee.org/document/8766229",
          "title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
        }
      ],
      "process_graph": {
        "sum": {
          "process_id": "sum",
          "arguments": {
            "data": [
              {
                "from_parameter": "x"
              },
              {
                "from_parameter": "y"
              }
            ],
            "ignore_nodata": false
          },
          "result": true
        }
      }
    },
    {
      "id": "divide",
      "summary": "Division of two numbers",
      "description": "Divides argument `x` by the argument `y` (*x / y*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, a division by zero results in ±infinity if the processing environment supports it. Otherwise a `DivisionByZero` error must the thrown.",
      "categories": [
        "math"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "The dividend.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        {
          "name": "y",
          "description": "The divisor.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "The computed result.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "exceptions": {
        "DivisionByZero": {
          "message": "Division by zero is not supported."
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 5,
            "y": 2.5
          },
          "returns": 2
        },
        {
          "arguments": {
            "x": -2,
            "y": 4
          },
          "returns": -0.5
        },
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Division.html",
          "title": "Division explained by Wolfram MathWorld"
        },
        {
          "rel": "about",
          "href": "https://ieeexplore.ieee.org/document/8766229",
          "title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
        }
      ]
    },
    {
      "id": "subtract",
      "summary": "Subtraction of two numbers",
      "description": "Subtracts argument `y` from the argument `x` (*x - y*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
      "categories": [
        "math"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "The minuend.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        {
          "name": "y",
          "description": "The subtrahend.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        }
      ],
      "returns": {
        "description": "The computed result.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 5,
            "y": 2.5
          },
          "returns": 2.5
        },
        {
          "arguments": {
            "x": -2,
            "y": 4
          },
          "returns": -6
        },
        {
          "arguments": {
            "x": 1,
            "y": null
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Subtraction.html",
          "title": "Subtraction explained by Wolfram MathWorld"
        },
        {
          "rel": "about",
          "href": "https://ieeexplore.ieee.org/document/8766229",
          "title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
        }
      ]
    },
    {
      "id": "mean",
      "summary": "Arithmetic mean (average)",
      "description": "The arithmetic mean of an array of numbers is the quantity commonly called the average. It is defined as the sum of all elements divided by the number of elements.\n\nAn array without non-`null` elements resolves always with `null`.",
      "categories": [
        "math",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "An array of numbers.",
          "schema": {
            "type": "array",
            "items": {
              "type": [
                "number",
                "null"
              ]
            }
          }
        },
        {
          "name": "ignore_nodata",
          "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "The computed arithmetic mean.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              1,
              0,
              3,
              2
            ]
          },
          "returns": 1.5
        },
        {
          "arguments": {
            "data": [
              9,
              2.5,
              null,
              -2.5
            ]
          },
          "returns": 3
        },
        {
          "arguments": {
            "data": [
              1,
              null
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "description": "The input array is empty: return `null`.",
          "arguments": {
            "data": []
          },
          "returns": null
        },
        {
          "description": "The input array has only `null` elements: return `null`.",
          "arguments": {
            "data": [
              null,
              null
            ]
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/ArithmeticMean.html",
          "title": "Arithmetic mean explained by Wolfram MathWorld"
        }
      ],
      "process_graph": {
        "count_condition": {
          "process_id": "if",
          "arguments": {
            "value": {
              "from_parameter": "ignore_nodata"
            },
            "accept": null,
            "reject": true
          }
        },
        "count": {
          "process_id": "count",
          "arguments": {
            "data": {
              "from_parameter": "data"
            },
            "condition": {
              "from_node": "count_condition"
            }
          }
        },
        "sum": {
          "process_id": "sum",
          "arguments": {
            "data": {
              "from_parameter": "data"
            },
            "ignore_nodata": {
              "from_parameter": "ignore_nodata"
            }
          }
        },
        "divide": {
          "process_id": "divide",
          "arguments": {
            "x": {
              "from_node": "sum"
            },
            "y": {
              "from_node": "count"
            }
          }
        },
        "neq": {
          "process_id": "neq",
          "arguments": {
            "x": {
              "from_node": "count"
            },
            "y": 0
          }
        },
        "if": {
          "process_id": "if",
          "arguments": {
            "value": {
              "from_node": "neq"
            },
            "accept": {
              "from_node": "divide"
            }
          },
          "result": true
        }
      }
    },
    {
      "id": "median",
      "summary": "Statistical median",
      "description": "The statistical median of an array of numbers is the value separating the higher half from the lower half of the data.\n\nAn array without non-`null` elements resolves always with `null`.\n\n**Remarks:**\n\n* For a symmetric arrays, the result is equal to the ``mean()``.\n* The median can also be calculated by computing the ``quantiles()`` with a probability of *0.5*.",
      "categories": [
        "math",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "An array of numbers.",
          "schema": {
            "type": "array",
            "items": {
              "type": [
                "number",
                "null"
              ]
            }
          }
        },
        {
          "name": "ignore_nodata",
          "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "The computed statistical median.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              1,
              3,
              3,
              6,
              7,
              8,
              9
            ]
          },
          "returns": 6
        },
        {
          "arguments": {
            "data": [
              1,
              2,
              3,
              4,
              5,
              6,
              8,
              9
            ]
          },
          "returns": 4.5
        },
        {
          "arguments": {
            "data": [
              -1,
              -0.5,
              null,
              1
            ]
          },
          "returns": -0.5
        },
        {
          "arguments": {
            "data": [
              -1,
              0,
              null,
              1
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "description": "The input array is empty: return `null`.",
          "arguments": {
            "data": []
          },
          "returns": null
        },
        {
          "description": "The input array has only `null` elements: return `null`.",
          "arguments": {
            "data": [
              null,
              null
            ]
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/StatisticalMedian.html",
          "title": "Statistical Median explained by Wolfram MathWorld"
        }
      ],
      "process_graph": {
        "quantiles": {
          "process_id": "quantiles",
          "arguments": {
            "data": {
              "from_parameter": "data"
            },
            "probabilities": [
              0.5
            ],
            "ignore_nodata": {
              "from_parameter": "ignore_nodata"
            }
          }
        },
        "array_element": {
          "process_id": "array_element",
          "arguments": {
            "data": {
              "from_node": "quantiles"
            },
            "return_nodata": true,
            "index": 0
          },
          "result": true
        }
      }
    },
    {
      "id": "max",
      "summary": "Maximum value",
      "description": "Computes the largest value of an array of numbers, which is is equal to the first element of a sorted (i.e., ordered) version the array.\n\nAn array without non-`null` elements resolves always with `null`.",
      "categories": [
        "math",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "An array of numbers.",
          "schema": {
            "type": "array",
            "items": {
              "type": [
                "number",
                "null"
              ]
            }
          }
        },
        {
          "name": "ignore_nodata",
          "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "The maximum value.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              1,
              0,
              3,
              2
            ]
          },
          "returns": 3
        },
        {
          "arguments": {
            "data": [
              5,
              2.5,
              null,
              -0.7
            ]
          },
          "returns": 5
        },
        {
          "arguments": {
            "data": [
              1,
              0,
              3,
              null,
              2
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "description": "The input array is empty: return `null`.",
          "arguments": {
            "data": []
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Maximum.html",
          "title": "Maximum explained by Wolfram MathWorld"
        }
      ]
    },
    {
      "id": "min",
      "summary": "Minimum value",
      "description": "Computes the smallest value of an array of numbers, which is is equal to the last element of a sorted (i.e., ordered) version the array.\n\nAn array without non-`null` elements resolves always with `null`.",
      "categories": [
        "math",
        "reducer"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "An array of numbers.",
          "schema": {
            "type": "array",
            "items": {
              "type": [
                "number",
                "null"
              ]
            }
          }
        },
        {
          "name": "ignore_nodata",
          "description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
          "schema": {
            "type": "boolean"
          },
          "default": true,
          "optional": true
        }
      ],
      "returns": {
        "description": "The minimum value.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "data": [
              1,
              0,
              3,
              2
            ]
          },
          "returns": 0
        },
        {
          "arguments": {
            "data": [
              5,
              2.5,
              null,
              -0.7
            ]
          },
          "returns": -0.7
        },
        {
          "arguments": {
            "data": [
              1,
              0,
              3,
              null,
              2
            ],
            "ignore_nodata": false
          },
          "returns": null
        },
        {
          "arguments": {
            "data": []
          },
          "returns": null
        }
      ],
      "links": [
        {
          "rel": "about",
          "href": "http://mathworld.wolfram.com/Minimum.html",
          "title": "Minimum explained by Wolfram MathWorld"
        }
      ]
    },
    {
      "id": "apply",
      "summary": "Apply a process to each pixel",
      "description": "Applies a *unary* process to each pixel value in the data cube (i.e. a local operation). A unary process takes a single value and returns a single value, for example ``abs()`` or ``linear_scale_range()``. In contrast, the process ``apply_dimension()`` applies a process to all pixel values along a particular dimension.",
      "categories": [
        "cubes"
      ],
      "parameters": [
        {
          "name": "data",
          "description": "A data cube.",
          "schema": {
            "type": "object",
            "subtype": "raster-cube"
          }
        },
        {
          "name": "process",
          "description": "A unary process to be applied on each value, may consist of multiple sub-processes.",
          "schema": {
            "type": "object",
            "subtype": "process-graph",
            "parameters": [
              {
                "name": "x",
                "description": "The value to process.",
                "schema": {
                  "description": "Any data type."
                }
              },
              {
                "name": "context",
                "description": "Additional data passed by the user.",
                "schema": {
                  "description": "Any data type."
                },
                "optional": true,
                "default": null
              }
            ]
          }
        },
        {
          "name": "context",
          "description": "Additional data to be passed to the process.",
          "schema": {
            "description": "Any data type."
          },
          "optional": true,
          "default": null
        }
      ],
      "returns": {
        "description": "A data cube with the newly computed values and the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.",
        "schema": {
          "type": "object",
          "subtype": "raster-cube"
        }
      }
    },
    {
      "id": "linear_scale_range",
      "summary": "Linear transformation between two ranges",
      "description": "Performs a linear transformation between the input and output range.\n\nThe given number in `x` is clipped to the bounds specified in `inputMin` and `inputMax` so that the underlying formula *((x - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin* never returns any value lower than `outputMin` or greater than `outputMax`.\n\nPotential use case include\n\n* scaling values to the 8-bit range (0 - 255) often used for numeric representation of values in one of the channels of the [RGB colour model](https://en.wikipedia.org/wiki/RGB_color_model#Numeric_representations) or\n* calculating percentages (0 - 100).\n\nThe no-data value `null` is passed through and therefore gets propagated.",
      "categories": [
        "math"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "A number to transform. The number gets clipped to the bounds specified in `inputMin` and `inputMax`.",
          "schema": {
            "type": [
              "number",
              "null"
            ]
          }
        },
        {
          "name": "inputMin",
          "description": "Minimum value the input can obtain.",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "inputMax",
          "description": "Maximum value the input can obtain.",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "outputMin",
          "description": "Minimum value of the desired output range.",
          "schema": {
            "type": "number"
          },
          "default": 0,
          "optional": true
        },
        {
          "name": "outputMax",
          "description": "Maximum value of the desired output range.",
          "schema": {
            "type": "number"
          },
          "default": 1,
          "optional": true
        }
      ],
      "returns": {
        "description": "The transformed number.",
        "schema": {
          "type": [
            "number",
            "null"
          ]
        }
      },
      "examples": [
        {
          "arguments": {
            "x": 0.3,
            "inputMin": -1,
            "inputMax": 1,
            "outputMin": 0,
            "outputMax": 255
          },
          "returns": 165.75
        },
        {
          "arguments": {
            "x": 25.5,
            "inputMin": 0,
            "inputMax": 255
          },
          "returns": 0.1
        },
        {
          "arguments": {
            "x": null,
            "inputMin": 0,
            "inputMax": 100
          },
          "returns": null
        },
        {
          "description": "Shows that the input data is clipped.",
          "arguments": {
            "x": 1.12,
            "inputMin": 0,
            "inputMax": 1,
            "outputMin": 0,
            "outputMax": 255
          },
          "returns": 255
        }
      ],
      "process_graph": {
        "subtract1": {
          "process_id": "subtract",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": {
              "from_parameter": "inputMin"
            }
          }
        },
        "subtract2": {
          "process_id": "subtract",
          "arguments": {
            "x": {
              "from_parameter": "inputMax"
            },
            "y": {
              "from_parameter": "inputMin"
            }
          }
        },
        "subtract3": {
          "process_id": "subtract",
          "arguments": {
            "x": {
              "from_parameter": "outputMax"
            },
            "y": {
              "from_parameter": "outputMin"
            }
          }
        },
        "divide": {
          "process_id": "divide",
          "arguments": {
            "x": {
              "from_node": "subtract1"
            },
            "y": {
              "from_node": "subtract2"
            }
          }
        },
        "multiply": {
          "process_id": "multiply",
          "arguments": {
            "x": {
              "from_node": "divide"
            },
            "y": {
              "from_node": "subtract3"
            }
          }
        },
        "add": {
          "process_id": "add",
          "arguments": {
            "x": {
              "from_node": "multiply"
            },
            "y": {
              "from_parameter": "outputMin"
            }
          },
          "result": true
        }
      }
    },
    {
      "id": "normalized_difference",
      "summary": "Normalized difference",
      "description": "Computes the normalized difference for two bands. The normalized difference is computed as *(x - y) / (x + y)*.\n\nThis process could be used for a number of remote sensing indices such as:\n\n* [NDVI](https://eos.com/ndvi/): `x` = NIR band, `y` = red band\n* [NDWI](https://eos.com/ndwi/): `x` = NIR band, `y` = SWIR band\n* [NDSI](https://eos.com/ndsi/): `x` = green band, `y` = SWIR band\n\nSome back-ends may have native processes such as ``ndvi()`` available for convenience.",
      "categories": [
        "math > indices",
        "vegetation indices"
      ],
      "parameters": [
        {
          "name": "x",
          "description": "The value for the first band.",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "y",
          "description": "The value for the second band.",
          "schema": {
            "type": "number"
          }
        }
      ],
      "returns": {
        "description": "The computed normalized difference.",
        "schema": {
          "type": "number",
          "minimum": -1,
          "maximum": 1
        }
      },
      "links": [
        {
          "rel": "related",
          "href": "https://eos.com/ndvi/",
          "title": "NDVI explained by EOS"
        },
        {
          "rel": "related",
          "href": "https://eos.com/ndwi/",
          "title": "NDWI explained by EOS"
        },
        {
          "rel": "related",
          "href": "https://eos.com/ndsi/",
          "title": "NDSI explained by EOS"
        }
      ],
      "process_graph": {
        "subtract": {
          "process_id": "subtract",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": {
              "from_parameter": "y"
            }
          }
        },
        "add": {
          "process_id": "add",
          "arguments": {
            "x": {
              "from_parameter": "x"
            },
            "y": {
              "from_parameter": "y"
            }
          }
        },
        "divide": {
          "process_id": "divide",
          "arguments": {
            "x": {
              "from_node": "subtract"
            },
            "y": {
              "from_node": "add"
            }
          },
          "result": true
        }
      }
    }
  ],
  "links": [
    {
      "rel": "alternate",
      "href": "https://openeo.org/processes",
      "type": "text/html",
      "title": "HTML version of the processes"
    }
  ]
}
