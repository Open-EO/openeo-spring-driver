package org.openeo.spring.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinTable;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.JoinColumn;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModelProperty;

/**
 * BatchJobResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-02T08:45:00.334+02:00[Europe/Rome]")
@Entity
@Table(name = "job_results")
public class BatchJobResult implements Serializable {

	private static final long serialVersionUID = -879934306104454215L;

	@JsonProperty("stac_version")
	private String stacVersion;

	@JsonProperty("stac_extensions")
	@Valid
	@Embedded
	private Set<String> stacExtensions = null;
	
	@Id
	@JsonProperty("id")
	private UUID id;

	@JsonProperty("type")
	@Enumerated
	@Column(name = "asset_type")
	private AssetType type = AssetType.FEATURE;

	@JsonProperty("bbox")
	@Valid
	@Embedded
	private List<BigDecimal> bbox = null;

	@JsonProperty("geometry")
	@Embedded
	private GeoJsonGeometry geometry = null;

	@JsonProperty("properties")
	@Valid
	@Transient
	private Map<String, Object> properties = new HashMap<>();

	@JsonProperty("assets")
	@OneToMany(cascade = {CascadeType.MERGE, CascadeType.REFRESH}, fetch = FetchType.EAGER)
    @JoinTable(name = "result_asset_mapping", 
      joinColumns = {@JoinColumn(name = "result_id", referencedColumnName = "id")},
      inverseJoinColumns = {@JoinColumn(name = "asset_id", referencedColumnName = "href")})
    @MapKey(name = "href")
	private Map<String, Asset> assets = new HashMap<>();

	@JsonProperty("links")
	@Valid
	@Embedded
	private List<Link> links = new ArrayList<>();

	public BatchJobResult stacVersion(String stacVersion) {
		this.stacVersion = stacVersion;
		return this;
	}

	/**
	 * The [version of the STAC
	 * specification](https://github.com/radiantearth/stac-spec/releases), which MAY
	 * not be equal to the [STAC API version](#section/STAC). Supports versions
	 * 0.9.x and 1.x.x.
	 * 
	 * @return stacVersion
	 */
	@ApiModelProperty(required = true, value = "The [version of the STAC specification](https://github.com/radiantearth/stac-spec/releases), which MAY not be equal to the [STAC API version](#section/STAC). Supports versions 0.9.x and 1.x.x.")
	@NotNull

	public String getStacVersion() {
		return stacVersion;
	}

	public void setStacVersion(String stacVersion) {
		this.stacVersion = stacVersion;
	}

	public BatchJobResult stacExtensions(Set<String> stacExtensions) {
		this.stacExtensions = stacExtensions;
		return this;
	}

	public BatchJobResult addStacExtensionsItem(String stacExtensionsItem) {
		if (this.stacExtensions == null) {
			this.stacExtensions = new LinkedHashSet<>();
		}
		this.stacExtensions.add(stacExtensionsItem);
		return this;
	}

	/**
	 * A list of implemented STAC extensions. The list contains URLs to the JSON
	 * Schema files it can be validated against. For official extensions, a
	 * \"shortcut\" can be used. This means you can specify the folder name of the
	 * extension in the STAC repository, for example `sar` for the SAR extension. If
	 * the versions of the extension and the collection diverge, you can specify the
	 * URL of the JSON schema file.
	 * 
	 * @return stacExtensions
	 */
	@ApiModelProperty(value = "A list of implemented STAC extensions. The list contains URLs to the JSON Schema files it can be validated against. For official extensions, a \"shortcut\" can be used. This means you can specify the folder name of the extension in the STAC repository, for example `sar` for the SAR extension. If the versions of the extension and the collection diverge, you can specify the URL of the JSON schema file.")

	@Valid

	public Set<String> getStacExtensions() {
		return stacExtensions;
	}

	public void setStacExtensions(Set<String> stacExtensions) {
		this.stacExtensions = stacExtensions;
	}

	public BatchJobResult id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Unique identifier of the batch job, generated by the back-end during
	 * creation. MUST match the specified pattern.
	 * 
	 * @return id
	 */
	@ApiModelProperty(example = "a3cca2b2aa1e3b5b", required = true, value = "Unique identifier of the batch job, generated by the back-end during creation. MUST match the specified pattern.")
	@NotNull
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public BatchJobResult type(AssetType type) {
		this.type = type;
		return this;
	}

	/**
	 * Get type
	 * 
	 * @return type
	 */
	@ApiModelProperty(required = true, value = "")
	@NotNull

	public AssetType getType() {
		return type;
	}

	public void setType(AssetType type) {
		this.type = type;
	}

	public BatchJobResult bbox(List<BigDecimal> bbox) {
		this.bbox = bbox;
		return this;
	}

	public BatchJobResult addBboxItem(BigDecimal bboxItem) {
		if (this.bbox == null) {
			this.bbox = new ArrayList<>();
		}
		this.bbox.add(bboxItem);
		return this;
	}

	/**
	 * Potential *spatial extent* covered by the data. The bounding box is provided
	 * as four or six numbers. Six numbers are specified, if the coordinate
	 * reference system includes a vertical axis (height or depth). The order of the
	 * elements in the array: - West (lower left corner, coordinate axis 1) - South
	 * (lower left corner, coordinate axis 2) - Base (optional, lower left corner,
	 * coordinate axis 3) - East (upper right corner, coordinate axis 1) - North
	 * (upper right corner, coordinate axis 2) - Height (optional, upper right
	 * corner, coordinate axis 3) The coordinate reference system of the values is
	 * WGS84 longitude/latitude. Specifying the `bbox` is strongly RECOMMENDED for
	 * STAC compliance, but can be omitted if the result is unlocated and the
	 * `geometry` is set to `null`.
	 * 
	 * @return bbox
	 */
	@ApiModelProperty(example = "[-180,-90,180,90]", value = "Potential *spatial extent* covered by the data.  The bounding box is provided as four or six numbers. Six numbers are specified, if the coordinate reference system includes a vertical axis (height or depth). The order of the elements in the array:  - West (lower left corner, coordinate axis 1) - South (lower left corner, coordinate axis 2) - Base (optional, lower left corner, coordinate axis 3) - East (upper right corner, coordinate axis 1) - North (upper right corner, coordinate axis 2) - Height (optional, upper right corner, coordinate axis 3)  The coordinate reference system of the values is WGS84 longitude/latitude.  Specifying the `bbox` is strongly RECOMMENDED for STAC compliance, but can be omitted if the result is unlocated and the `geometry` is set to `null`.")

	@Valid

	public List<BigDecimal> getBbox() {
		return bbox;
	}

	public void setBbox(List<BigDecimal> bbox) {
		this.bbox = bbox;
	}

	public BatchJobResult geometry(GeoJsonGeometry geometry) {
		this.geometry = geometry;
		return this;
	}

	/**
	 * Defines the full footprint of the asset represented by this item as GeoJSON
	 * Geometry. Results without a known location can set this value to `null`.
	 * 
	 * @return geometry
	 */
	@ApiModelProperty(example = "{\"type\":\"Polygon\",\"coordinates\":[[[-180,-90],[180,-90],[180,90],[-180,90],[-180,-90]]]}", required = true, value = "Defines the full footprint of the asset represented by this item as GeoJSON Geometry.  Results without a known location can set this value to `null`.")

	@Valid

	public GeoJsonGeometry getGeometry() {
		return geometry;
	}

	public void setGeometry(GeoJsonGeometry geometry) {
		this.geometry = geometry;
	}

	public BatchJobResult properties(Map<String, Object> properties) {
		this.properties = properties;
		return this;
	}

	public BatchJobResult putPropertiesItem(String key, Object propertiesItem) {
		this.properties.put(key, propertiesItem);
		return this;
	}

	/**
	 * MAY contain any additional properties, e.g. other STAC Item properties,
	 * properties from STAC extensions or custom properties.
	 * 
	 * @return properties
	 */
	@ApiModelProperty(required = true, value = "MAY contain any additional properties, e.g. other STAC Item properties, properties from STAC extensions or custom properties.")
	@NotNull

	public Map<String, Object> getProperties() {
		return properties;
	}

	public void setProperties(Map<String, Object> properties) {
		this.properties = properties;
	}

	public BatchJobResult assets(Map<String, Asset> assets) {
		this.assets = assets;
		return this;
	}

	public BatchJobResult putAssetsItem(String key, Asset assetsItem) {
		this.assets.put(key, assetsItem);
		return this;
	}

	/**
	 * Dictionary of asset objects for data that can be downloaded, each with a
	 * unique key. The keys MAY be used by clients as file names. It is RECOMMENDED
	 * to link to a copy of this STAC Item with relative links in the assets, which
	 * allows users to easily publish their processed data with a basic set of
	 * metadata.
	 * 
	 * @return assets
	 */
	@ApiModelProperty(example = "{\"preview.png\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/preview.png\",\"type\":\"image/png\",\"title\":\"Thumbnail\",\"roles\":[\"thumbnail\"]},\"process.json\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/process.json\",\"type\":\"application/json\",\"title\":\"Original Process\",\"roles\":[\"process\",\"reproduction\"]},\"1.tif\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/1.tif\",\"type\":\"image/tiff; application=geotiff\",\"title\":\"Band 1\",\"roles\":[\"data\"]},\"2.tif\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/2.tif\",\"type\":\"image/tiff; application=geotiff\",\"title\":\"Band 2\",\"roles\":[\"data\"]},\"inspire.xml\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/inspire.xml\",\"type\":\"application/xml\",\"title\":\"INSPIRE metadata\",\"description\":\"INSPIRE compliant XML metadata\",\"roles\":[\"metadata\"]}}", required = true, value = "Dictionary of asset objects for data that can be downloaded, each with a unique key. The keys MAY be used by clients as file names.  It is RECOMMENDED to link to a copy of this STAC Item with relative links in the assets, which allows users to easily publish their processed data with a basic set of metadata.")
	@NotNull

	@Valid

	public Map<String, Asset> getAssets() {
		return assets;
	}

	public void setAssets(Map<String, Asset> assets) {
		this.assets = assets;
	}

	public BatchJobResult links(List<Link> links) {
		this.links = links;
		return this;
	}

	public BatchJobResult addLinksItem(Link linksItem) {
		this.links.add(linksItem);
		return this;
	}

	/**
	 * Links related to this batch job result, e.g. a link to an invoice, additional
	 * log files or external documentation. The links MUST NOT contain links to the
	 * processed and downloadable data. Instead specify these in the `assets`
	 * property. Clients MUST NOT download the data referenced in the links by
	 * default. For relation types see the lists of [common relation types in
	 * openEO](#section/API-Principles/Web-Linking).
	 * 
	 * @return links
	 */
	@ApiModelProperty(required = true, value = "Links related to this batch job result, e.g. a link to an  invoice, additional log files or external documentation. The links MUST NOT contain links to the processed and downloadable data. Instead specify these in the `assets` property. Clients MUST NOT download the data referenced in the links by default. For relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).")
	@NotNull

	@Valid

	public List<Link> getLinks() {
		return links;
	}

	public void setLinks(List<Link> links) {
		this.links = links;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BatchJobResult batchJobResult = (BatchJobResult) o;
		return Objects.equals(this.stacVersion, batchJobResult.stacVersion)
				&& Objects.equals(this.stacExtensions, batchJobResult.stacExtensions)
				&& Objects.equals(this.id, batchJobResult.id) && Objects.equals(this.type, batchJobResult.type)
				&& Objects.equals(this.bbox, batchJobResult.bbox)
				&& Objects.equals(this.geometry, batchJobResult.geometry)
				&& Objects.equals(this.properties, batchJobResult.properties)
				&& Objects.equals(this.assets, batchJobResult.assets)
				&& Objects.equals(this.links, batchJobResult.links);
	}

	@Override
	public int hashCode() {
		return Objects.hash(stacVersion, stacExtensions, id, type, bbox, geometry, properties, assets, links);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BatchJobResult {\n");

		sb.append("    stacVersion: ").append(toIndentedString(stacVersion)).append("\n");
		sb.append("    stacExtensions: ").append(toIndentedString(stacExtensions)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    bbox: ").append(toIndentedString(bbox)).append("\n");
		sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
		sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
		sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
		sb.append("    links: ").append(toIndentedString(links)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}
