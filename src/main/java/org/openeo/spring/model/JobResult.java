package org.openeo.spring.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openeo.spring.model.AnyOfURIstring;
import org.openeo.spring.model.Asset;
import org.openeo.spring.model.GeoJsonGeometry;
import org.openeo.spring.model.Link;
import org.openeo.spring.model.StacVersion;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * JobResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-30T14:48:14.663+02:00[Europe/Rome]")
public class JobResult   {
  @JsonProperty("stac_version")
  private StacVersion stacVersion;

  @JsonProperty("stac_extensions")
  @Valid
  private Set<AnyOfURIstring> stacExtensions = null;

  @JsonProperty("id")
  private String id;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    FEATURE("Feature");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("type")
  private TypeEnum type;

  @JsonProperty("bbox")
  @Valid
  private List<BigDecimal> bbox = new ArrayList<>();

  @JsonProperty("geometry")
  private GeoJsonGeometry geometry = null;

  @JsonProperty("properties")
  @Valid
  private Map<String, Object> properties = new HashMap<>();

  @JsonProperty("assets")
  @Valid
  private Map<String, Asset> assets = new HashMap<>();

  @JsonProperty("links")
  @Valid
  private List<Link> links = new ArrayList<>();

  public JobResult stacVersion(StacVersion stacVersion) {
    this.stacVersion = stacVersion;
    return this;
  }

  /**
   * Get stacVersion
   * @return stacVersion
  */
  @ApiModelProperty(required = true, value = "")
  @NotNull

  @Valid

  public StacVersion getStacVersion() {
    return stacVersion;
  }

  public void setStacVersion(StacVersion stacVersion) {
    this.stacVersion = stacVersion;
  }

  public JobResult stacExtensions(Set<AnyOfURIstring> stacExtensions) {
    this.stacExtensions = stacExtensions;
    return this;
  }

  public JobResult addStacExtensionsItem(AnyOfURIstring stacExtensionsItem) {
    if (this.stacExtensions == null) {
      this.stacExtensions = new LinkedHashSet<>();
    }
    this.stacExtensions.add(stacExtensionsItem);
    return this;
  }

  /**
   * A list of implemented STAC extensions. The list contains URLs to the JSON Schema files it can be validated against. For official extensions, a \"shortcut\" can be used. This means you can specify the folder name of the extension in the STAC repository, for example `sar` for the SAR extension. If the versions of the extension and the collection diverge, you can specify the URL of the JSON schema file.
   * @return stacExtensions
  */
  @ApiModelProperty(value = "A list of implemented STAC extensions. The list contains URLs to the JSON Schema files it can be validated against. For official extensions, a \"shortcut\" can be used. This means you can specify the folder name of the extension in the STAC repository, for example `sar` for the SAR extension. If the versions of the extension and the collection diverge, you can specify the URL of the JSON schema file.")

  @Valid

  public Set<AnyOfURIstring> getStacExtensions() {
    return stacExtensions;
  }

  public void setStacExtensions(Set<AnyOfURIstring> stacExtensions) {
    this.stacExtensions = stacExtensions;
  }

  public JobResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the batch job, generated by the back-end during creation. MUST match the specified pattern.
   * @return id
  */
  @ApiModelProperty(example = "a3cca2b2aa1e3b5b", required = true, value = "Unique identifier of the batch job, generated by the back-end during creation. MUST match the specified pattern.")
  @NotNull

@Pattern(regexp="^[\\w\\-\\.~]+$") 
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public JobResult type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
  */
  @ApiModelProperty(required = true, value = "")
  @NotNull


  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public JobResult bbox(List<BigDecimal> bbox) {
    this.bbox = bbox;
    return this;
  }

  public JobResult addBboxItem(BigDecimal bboxItem) {
    this.bbox.add(bboxItem);
    return this;
  }

  /**
   * Potential *spatial extent* covered by the data. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  - West (lower left corner, coordinate axis 1) - South (lower left corner, coordinate axis 2) - Base (optional, lower left corner, coordinate axis 3) - East (upper right corner, coordinate axis 1) - North (upper right corner, coordinate axis 2) - Height (optional, upper right corner, coordinate axis 3)  The coordinate reference system of the values is WGS84 longitude/latitude.
   * @return bbox
  */
  @ApiModelProperty(example = "[-180,-90,180,90]", required = true, value = "Potential *spatial extent* covered by the data. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  - West (lower left corner, coordinate axis 1) - South (lower left corner, coordinate axis 2) - Base (optional, lower left corner, coordinate axis 3) - East (upper right corner, coordinate axis 1) - North (upper right corner, coordinate axis 2) - Height (optional, upper right corner, coordinate axis 3)  The coordinate reference system of the values is WGS84 longitude/latitude.")
  @NotNull

  @Valid
@Size(min=4,max=6) 
  public List<BigDecimal> getBbox() {
    return bbox;
  }

  public void setBbox(List<BigDecimal> bbox) {
    this.bbox = bbox;
  }

  public JobResult geometry(GeoJsonGeometry geometry) {
    this.geometry = geometry;
    return this;
  }

  /**
   * Defines the full footprint of the asset represented by this item as GeoJSON Geometry.
   * @return geometry
  */
  @ApiModelProperty(example = "{\"type\":\"Polygon\",\"coordinates\":[[[-180,-90],[180,-90],[180,90],[-180,90],[-180,-90]]]}", required = true, value = "Defines the full footprint of the asset represented by this item as GeoJSON Geometry.")
  @NotNull

  @Valid

  public GeoJsonGeometry getGeometry() {
    return geometry;
  }

  public void setGeometry(GeoJsonGeometry geometry) {
    this.geometry = geometry;
  }

  public JobResult properties(Map<String, Object> properties) {
    this.properties = properties;
    return this;
  }

  public JobResult putPropertiesItem(String key, Object propertiesItem) {
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * MAY contain any additional properties, e.g. other STAC Item properties, properties from STAC extensions or custom properties.
   * @return properties
  */
  @ApiModelProperty(required = true, value = "MAY contain any additional properties, e.g. other STAC Item properties, properties from STAC extensions or custom properties.")
  @NotNull


  public Map<String, Object> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, Object> properties) {
    this.properties = properties;
  }

  public JobResult assets(Map<String, Asset> assets) {
    this.assets = assets;
    return this;
  }

  public JobResult putAssetsItem(String key, Asset assetsItem) {
    this.assets.put(key, assetsItem);
    return this;
  }

  /**
   * Dictionary of asset objects for data that can be downloaded, each with a unique key. The keys MAY be used by clients as file names.
   * @return assets
  */
  @ApiModelProperty(example = "{\"preview.png\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/preview.png\",\"type\":\"image/png\",\"title\":\"Thumbnail\",\"roles\":[\"thumbnail\"]},\"process.json\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/process.json\",\"type\":\"application/json\",\"title\":\"Original Process\",\"roles\":[\"process\",\"reproduction\"]},\"1.tif\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/1.tif\",\"type\":\"image/tiff; application=geotiff\",\"title\":\"Band 1\",\"roles\":[\"data\"]},\"2.tif\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/2.tif\",\"type\":\"image/tiff; application=geotiff\",\"title\":\"Band 2\",\"roles\":[\"data\"]},\"inspire.xml\":{\"href\":\"https://example.openeo.org/api/download/583fba8b2ce583fba8b2ce/inspire.xml\",\"type\":\"application/xml\",\"title\":\"INSPIRE metadata\",\"description\":\"INSPIRE compliant XML metadata\",\"roles\":[\"metadata\"]}}", required = true, value = "Dictionary of asset objects for data that can be downloaded, each with a unique key. The keys MAY be used by clients as file names.")
  @NotNull

  @Valid

  public Map<String, Asset> getAssets() {
    return assets;
  }

  public void setAssets(Map<String, Asset> assets) {
    this.assets = assets;
  }

  public JobResult links(List<Link> links) {
    this.links = links;
    return this;
  }

  public JobResult addLinksItem(Link linksItem) {
    this.links.add(linksItem);
    return this;
  }

  /**
   * Links related to this batch job result, e.g. a link to an  invoice, additional log files or external documentation. The links MUST NOT contain links to the processed and downloadable data. Instead specify these in the `assets` property. Clients MUST NOT download the data referenced in the links by default. For relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
   * @return links
  */
  @ApiModelProperty(required = true, value = "Links related to this batch job result, e.g. a link to an  invoice, additional log files or external documentation. The links MUST NOT contain links to the processed and downloadable data. Instead specify these in the `assets` property. Clients MUST NOT download the data referenced in the links by default. For relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).")
  @NotNull

  @Valid

  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobResult jobResult = (JobResult) o;
    return Objects.equals(this.stacVersion, jobResult.stacVersion) &&
        Objects.equals(this.stacExtensions, jobResult.stacExtensions) &&
        Objects.equals(this.id, jobResult.id) &&
        Objects.equals(this.type, jobResult.type) &&
        Objects.equals(this.bbox, jobResult.bbox) &&
        Objects.equals(this.geometry, jobResult.geometry) &&
        Objects.equals(this.properties, jobResult.properties) &&
        Objects.equals(this.assets, jobResult.assets) &&
        Objects.equals(this.links, jobResult.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stacVersion, stacExtensions, id, type, bbox, geometry, properties, assets, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobResult {\n");
    
    sb.append("    stacVersion: ").append(toIndentedString(stacVersion)).append("\n");
    sb.append("    stacExtensions: ").append(toIndentedString(stacExtensions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    bbox: ").append(toIndentedString(bbox)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

