/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openeo.spring.api;

import org.openeo.spring.model.Error;
import org.openeo.spring.model.FormatOverviewResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-30T14:48:14.663+02:00[Europe/Rome]")
@Validated
@Api(value = "file_formats", description = "the file_formats API")
public interface FileFormatsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /file_formats : Supported file formats
     * The request will ask the back-end for supported input and output file formats. *Input* file formats specify which file a back-end can *read* from. *Output* file formats specify which file a back-end can *write* to.  The response to this request is an object listing all available input and output file formats separately with their parameters and additional data. This endpoint does not include the supported secondary web services.  **Note**: Format names and parameters MUST be fully aligned with the GDAL codes if available, see [GDAL Raster Formats](http://www.gdal.org/formats_list.html) and [OGR Vector Formats](http://www.gdal.org/ogr_formats.html). It is OPTIONAL to support all output format parameters supported by GDAL. Some file formats not available through GDAL may be defined centrally for openEO. Custom file formats or parameters MAY be defined.  The format descriptions must describe how the file formats relate to  data cubes. Input file formats must describe how the files have to be structured to be transformed into data cubes. Output file formats must describe how the data cubes are stored at the back-end and how the  resulting file structure looks like.  Back-ends MUST NOT support aliases, for example it is not allowed to support &#x60;geotiff&#x60; instead of &#x60;gtiff&#x60;. Nevertheless, openEO Clients MAY translate user input input for convenience (e.g. translate &#x60;geotiff&#x60; to &#x60;gtiff&#x60;). Also, for a better user experience the back-end can specify a &#x60;title&#x60;.  Format names are allowed to be *case insensitive* throughout the API.
     *
     * @return An object with containing all input and output format separately.  For each property &#x60;input&#x60; and &#x60;output&#x60; an object is defined where the  file format names are the property keys and the property values are objects that define a title, supported parameters and related links. (status code 200)
     *         or The request can&#39;t be fulfilled due to an error on client-side, i.e. the request is invalid. The client should not repeat the request without modifications.  The response body SHOULD contain a JSON error object. MUST be any HTTP status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6). This request usually does not respond with HTTP status codes 401 and 403 due to missing authorization. HTTP status code 404 should be used if the value of a path parameter is invalid.  See also: * [Error Handling](#section/API-Principles/Error-Handling) in the API in general. * [Common Error Codes](errors.json) (status code 400)
     *         or The request can&#39;t be fulfilled due to an error at the back-end. The error is never the client’s fault and therefore it is reasonable for the client to retry the exact same request that triggered this response.  The response body SHOULD contain a JSON error object. MUST be any HTTP status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6).  See also: * [Error Handling](#section/API-Principles/Error-Handling) in the API in general. * [Common Error Codes](errors.json) (status code 500)
     */
    @ApiOperation(value = "Supported file formats", nickname = "listFileTypes", notes = "The request will ask the back-end for supported input and output file formats. *Input* file formats specify which file a back-end can *read* from. *Output* file formats specify which file a back-end can *write* to.  The response to this request is an object listing all available input and output file formats separately with their parameters and additional data. This endpoint does not include the supported secondary web services.  **Note**: Format names and parameters MUST be fully aligned with the GDAL codes if available, see [GDAL Raster Formats](http://www.gdal.org/formats_list.html) and [OGR Vector Formats](http://www.gdal.org/ogr_formats.html). It is OPTIONAL to support all output format parameters supported by GDAL. Some file formats not available through GDAL may be defined centrally for openEO. Custom file formats or parameters MAY be defined.  The format descriptions must describe how the file formats relate to  data cubes. Input file formats must describe how the files have to be structured to be transformed into data cubes. Output file formats must describe how the data cubes are stored at the back-end and how the  resulting file structure looks like.  Back-ends MUST NOT support aliases, for example it is not allowed to support `geotiff` instead of `gtiff`. Nevertheless, openEO Clients MAY translate user input input for convenience (e.g. translate `geotiff` to `gtiff`). Also, for a better user experience the back-end can specify a `title`.  Format names are allowed to be *case insensitive* throughout the API.", response = FormatOverviewResponse.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "Capabilities","Data Processing", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An object with containing all input and output format separately.  For each property `input` and `output` an object is defined where the  file format names are the property keys and the property values are objects that define a title, supported parameters and related links.", response = FormatOverviewResponse.class),
        @ApiResponse(code = 400, message = "The request can't be fulfilled due to an error on client-side, i.e. the request is invalid. The client should not repeat the request without modifications.  The response body SHOULD contain a JSON error object. MUST be any HTTP status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6). This request usually does not respond with HTTP status codes 401 and 403 due to missing authorization. HTTP status code 404 should be used if the value of a path parameter is invalid.  See also: * [Error Handling](#section/API-Principles/Error-Handling) in the API in general. * [Common Error Codes](errors.json)", response = Error.class),
        @ApiResponse(code = 500, message = "The request can't be fulfilled due to an error at the back-end. The error is never the client’s fault and therefore it is reasonable for the client to retry the exact same request that triggered this response.  The response body SHOULD contain a JSON error object. MUST be any HTTP status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6).  See also: * [Error Handling](#section/API-Principles/Error-Handling) in the API in general. * [Common Error Codes](errors.json)", response = Error.class) })
    @RequestMapping(value = "/file_formats",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<FormatOverviewResponse> listFileTypes() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"{\\"output\\":{\\"GTiff\\":{\\"title\\":\\"GeoTiff\\",\\"description\\":\\"Export to GeoTiff. Doesn't support cloud-optimized GeoTiffs (COGs) yet.\\",\\"gis_data_types\\":[\\"raster\\"],\\"parameters\\":{\\"tiled\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"This option can be used to force creation of tiled TIFF files [true]. By default [false] stripped TIFF files are created.\\",\\"default\\":false},\\"compress\\":{\\"type\\":\\"string\\",\\"description\\":\\"Set the compression to use.\\",\\"default\\":\\"none\\",\\"enum\\":[\\"JPEG\\",\\"LZW\\",\\"DEFLATE\\",\\"NONE\\"]},\\"jpeg_quality\\":{\\"type\\":\\"integer\\",\\"description\\":\\"Set the JPEG quality when using JPEG.\\",\\"minimum\\":1,\\"maximum\\":100,\\"default\\":75}},\\"links\\":[{\\"href\\":\\"https://www.gdal.org/frmt_gtiff.html\\",\\"rel\\":\\"about\\",\\"title\\":\\"GDAL on the GeoTiff file format and storage options\\"}]},\\"GPKG\\":{\\"title\\":\\"OGC GeoPackage\\",\\"gis_data_types\\":[\\"raster\\",\\"vector\\"],\\"parameters\\":{\\"version\\":{\\"type\\":\\"string\\",\\"description\\":\\"Set GeoPackage version. In AUTO mode, this will be equivalent to 1.2 starting with GDAL 2.3.\\",\\"enum\\":[\\"auto\\",\\"1\\",\\"1.1\\",\\"1.2\\"],\\"default\\":\\"auto\\"}},\\"links\\":[{\\"href\\":\\"https://www.gdal.org/drv_geopackage_raster.html\\",\\"rel\\":\\"about\\",\\"title\\":\\"GDAL on GeoPackage for raster data\\"},{\\"href\\":\\"https://www.gdal.org/drv_geopackage.html\\",\\"rel\\":\\"about\\",\\"title\\":\\"GDAL on GeoPackage for vector data\\"}]}},\\"input\\":{\\"GPKG\\":{\\"title\\":\\"OGC GeoPackage\\",\\"gis_data_types\\":[\\"raster\\",\\"vector\\"],\\"parameters\\":{\\"table\\":{\\"type\\":\\"string\\",\\"description\\":\\"**RASTER ONLY.** Name of the table containing the tiles. If the GeoPackage dataset only contains one table, this option is not necessary. Otherwise, it is required.\\"}},\\"links\\":[{\\"href\\":\\"https://www.gdal.org/drv_geopackage_raster.html\\",\\"rel\\":\\"about\\",\\"title\\":\\"GDAL on GeoPackage for raster data\\"},{\\"href\\":\\"https://www.gdal.org/drv_geopackage.html\\",\\"rel\\":\\"about\\",\\"title\\":\\"GDAL on GeoPackage for vector data\\"}]}}}\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
